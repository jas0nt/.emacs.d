#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* Variables
#+BEGIN_SRC emacs-lisp
  (setq is-on-linux (eq system-type 'gnu/linux))
  (setq my-font (if is-on-linux
					"Source Code Pro-9"
				  "Source Code Pro-14"))
#+END_SRC
* Packages
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
	:ensure t
	:init
	(progn
	  (global-set-key [remap other-window] 'ace-window)
	  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
	  (custom-set-faces
	   '(aw-leading-char-face
		 ((t (:inhrit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t)
#+END_SRC
** aweshell
#+BEGIN_SRC emacs-lisp
  (use-package aweshell
	:load-path "~/.emacs.d/elisp/aweshell"
	:config
	(add-hook 'eshell-mode-hook (lambda () (setq-local company-tabnine-always-trigger nil))))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
	:ensure t
	:config
	(beacon-mode 1)
	(setq beacon-color "#00FF00"))
#+END_SRC
** bongo
#+BEGIN_SRC emacs-lisp
  (use-package bongo
	:ensure t
	:config
	(setq bongo-logo nil)
	(setq bongo-display-track-icons nil)
	(setq bongo-prefer-library-buffers nil)
	(setq bongo-insert-whole-directory-trees t)

	(defun init-goto-bongo ()
	  (interactive)
	  (let ((bongo-playlist-buffer-name "*Bongo Playlist*"))
		(unless (get-buffer bongo-playlist-buffer-name)
		  (bongo)
		  (bongo-insert-file "~/Music/my_music")
		  (goto-char (point-min))
		  (bongo-random-playback-mode))
		(switch-to-buffer bongo-playlist-buffer-name)))

	(defhydra hydra-bongo ()
	  ("m" init-goto-bongo "goto-bongo" :color blue)
	  ("s" bongo-pause/resume "play/pause")
	  ("r" bongo-play-random "play random")
	  ("n" bongo-play-next "play next")
	  ("p" bongo-play-previous "play previous")
	  ("f" bongo-seek-forward-10 "forward")
	  ("F" bongo-seek-forward-60 "Forward")
	  ("b" bongo-seek-backward-10 "backward")
	  ("B" bongo-seek-backward-60 "Backward")
	  ("q" nil "Cancel")))
#+END_SRC
** bufler
#+BEGIN_SRC emacs-lisp
  (use-package bufler :ensure t)
  (use-package helm-bufler :ensure t)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
	:ensure t
	:config
	(setq company-idle-delay 0)
	(setq company-minimum-prefix-length 2)
	(global-company-mode t))

  (use-package company-quickhelp
	:ensure t
	:config
	(company-quickhelp-mode))
#+END_SRC
** company-english-helper
#+BEGIN_SRC emacs-lisp
  (use-package company-english-helper
	:load-path "~/.emacs.d/elisp/company-english-helper")
#+END_SRC
** company-tabnine
#+BEGIN_SRC emacs-lisp
  (use-package company-tabnine
    :ensure t
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
	:ensure t
	:config
	(dashboard-setup-startup-hook)
	(setq dashboard-center-content t)
	;;(setq dashboard-startup-banner "~/.emacs.d/banners/dark_knight.png")
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	(setq dashboard-image-banner-max-height 200)
	(setq dashboard-items '((recents  . 15)
							(projects . 5)
							(bookmarks . 5))))
#+END_SRC
** dimmer
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
	:ensure t
	:config
	(dimmer-configure-which-key)
	(dimmer-configure-helm)
	(dimmer-mode t))
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")       
	(require 'dired-x)
	(setq dired-guess-shell-alist-user '(("\\.*\\'" "open")))
	(setq dired-use-ls-dired nil))

  (setq dired-listing-switches "-alht")

  (use-package dired-ranger :ensure t)
#+END_SRC
** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (progn
      (dumb-jump-mode)
      (setq dumb-jump-selector 'helm)))
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
	:ensure t
	:init
	(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
	(setq evil-want-keybinding nil)
	(setq evil-disable-insert-state-bindings t)
	(setq evil-want-C-i-jump nil)
	(setq evil-want-C-u-scroll t)
	:config
	(evil-mode 1))

  (use-package evil-collection
	:after (evil)
	:ensure t
	:init
	(setq evil-collection-company-use-tng nil)
	:config
	(evil-collection-init))

  (use-package evil-nerd-commenter :ensure t)

  (use-package evil-pinyin
	:after (evil)
	:ensure t
	:init
	(setq-default evil-pinyin-scheme 'simplified-xiaohe-all)
	(setq-default evil-pinyin-with-search-rule 'always)
	:config
	(evil-select-search-module 'evil-search-module 'evil-search)
	(global-evil-pinyin-mode))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
** general
#+BEGIN_SRC emacs-lisp
  (use-package general :ensure t)
#+END_SRC
** google-this
#+BEGIN_SRC emacs-lisp
  (use-package google-this :ensure t)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm :ensure t)

  (use-package helm-ag :ensure t)

  (use-package helm-swoop :ensure t)
#+END_SRC
** highlight-blocks
#+BEGIN_SRC emacs-lisp
  (use-package highlight-blocks
	:ensure t
	:config
	(setq highlight-blocks--rainbow-colors
		  '("#000000" "#2F4F4F" "#006600" "#6272A4" "#44475A" "#BD93F9"))

	(setq highlight-blocks-max-face-count
		  (length highlight-blocks--rainbow-colors))

	(defun highlight-blocks--define-rainbow-colors (colors)
	  (dotimes (i (length colors))
		(face-spec-set
		 (intern (format "highlight-blocks-depth-%d-face" (1+ i)))
		 `((((class color) (background dark))  :background ,(nth i colors))
		   (((class color) (background light)) :background ,(nth i colors)))
		 'face-defface-spec)))

	(highlight-blocks--define-rainbow-colors highlight-blocks--rainbow-colors))
#+END_SRC
** highlight-thing
#+BEGIN_SRC emacs-lisp
  (use-package highlight-thing :ensure t)
#+END_SRC
** hungry-delete & aggresive-indent
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
	:ensure hydra
	:init
	(global-set-key
	 (kbd "C-x w")
	 (defhydra hydra-window ()
	   "window"
	   ("h" windmove-left)
	   ("j" windmove-down)
	   ("k" windmove-up)
	   ("l" windmove-right)
	   ("H" windmove-swap-states-left)
	   ("J" windmove-swap-states-down)
	   ("K" windmove-swap-states-up)
	   ("L" windmove-swap-states-right)
	   ("C-h" evil-window-move-far-left)
	   ("C-j" evil-window-move-very-bottom)
	   ("C-k" evil-window-move-very-top)
	   ("C-l" evil-window-move-far-right)
	   ("/" (lambda ()
			  (interactive)
			  (split-window-right)
			  (windmove-right))
		"v-split")
	   ("?" (lambda ()
			  (interactive)
			  (split-window-below)
			  (windmove-down))
		"h-split")
	   ("g" ace-window "goto")
	   ("s" ace-swap-window "swap")
	   ("d" ace-delete-window "del")
	   ("m" delete-other-windows "maximize" :color blue)
	   ("q" nil "cancel")
	   ))

	(defhydra hydra-buffer ()
	  "buffer"
	  ("j" switch-to-next-buffer)
	  ("k" switch-to-prev-buffer)
	  ("q" nil "cancel"))

	)
#+END_SRC
** ialign
#+BEGIN_SRC emacs-lisp
  (use-package ialign :ensure t)
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
	:ensure t
	:hook (
		   (prog-mode . lsp)
		   (lsp-mode . lsp-enable-which-key-integration))
	:commands lsp)

  ;; optionally
  (use-package lsp-ui
	:after (lsp-mode)
	:ensure t
	:commands lsp-ui-mode)

  (use-package helm-lsp
	:after (lsp-mode)
	:commands helm-lsp-workspace-symbol)

  (use-package dap-mode :ensure t)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)

  (use-package diff-hl
	:ensure t
	:config
	(global-diff-hl-mode)
	(defhydra hydra-diff-hl ()
	  "git diff"
	  ("j" diff-hl-next-hunk)
	  ("k" diff-hl-previous-hunk)
	  ("x" diff-hl-revert-hunk)
	  ("q" nil "cancel")))

#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
	:ensure t
	:commands (markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
		   ("\\.md\\'" . markdown-mode)
		   ("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "multimarkdown"))
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree :ensure t)
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (use-package org
	:ensure t
	:config
	(setq org-startup-with-inline-images t)
	(setq org-babel-python-command "python3")
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((python . t)
	   (R . t))))
#+END_SRC
** popwin
#+BEGIN_SRC emacs-lisp
  (use-package popwin
	:ensure t
	:config
	(popwin-mode t))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm))

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
	:ensure t
	:config
	(setq python-shell-interpreter "python3"))

  (use-package pyvenv
	:ensure t
	:config
	(pyvenv-mode 1))

  (use-package lsp-pyright
	:ensure t
	:hook (python-mode . (lambda ()
						   (require 'lsp-pyright)
						   (lsp)))
	:init
	(when (executable-find "python3")
	  (setq lsp-pyright-python-executable-cmd "python3")))

#+END_SRC
** quickrun
#+BEGIN_SRC emacs-lisp
  (use-package quickrun :ensure t)
#+END_SRC
** r-lang
#+BEGIN_SRC emacs-lisp
  (use-package ess :ensure t)
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
	:ensure t
	:config
	(rainbow-delimiters-mode)
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs :ensure t)
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode))
  (use-package company-restclient
    :ensure t
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC
** rime
#+BEGIN_SRC emacs-lisp
  (use-package rime
	:ensure t
	:config
	(unless is-on-linux
	  (setq rime-librime-root "~/.emacs.d/librime/dist"))
	(setq rime-posframe-properties
		  (list :background-color "#282a36"
				:foreground-color "#bd93f9"
				:font my-font
				:internal-border-width 10))

	(setq default-input-method "rime"
		  rime-show-candidate 'minibuffer))
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
	:ensure t
	:hook ('prog-mode . 'smartparens-mode))
#+END_SRC
** try
#+BEGIN_SRC emacs-lisp
  (use-package try :ensure t)
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
	:ensure t
	:config
	;; (setq vterm-shell my-shell)
	(add-hook 'vterm-mode-hook
			  (lambda () (setq-local global-hl-line-mode nil))))
  (use-package exec-path-from-shell
	:ensure t
	:config
	(when (memq window-system '(mac ns x))
	  (exec-path-from-shell-initialize)))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:config
	(which-key-mode)
	(setq which-key-idle-delay 0.5)
	(which-key-mode))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** youdao-dictionary
#+BEGIN_SRC emacs-lisp
  (use-package youdao-dictionary :ensure t)
#+END_SRC

* Configs
#+BEGIN_SRC emacs-lisp
  ;;custom file
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el" user-emacs-directory))
  (load-file custom-file)

  ;;ido mode
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)

  ;;diable error tone
  (setq ring-bell-function 'ignore)

  ;;no backup file
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;;show recent file
  (recentf-mode 1)
  (setq recentf-max-menu-items 15)

  ;;delete selection
  (delete-selection-mode 1)

  ;;paste from clipboard
  (setq x-select-enable-clipboard t)

  ;;replace Yes/No with y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;;exec-path
  (add-to-list 'exec-path "/usr/local/bin")

  ;;emacs deamon
  (unless (server-running-p) (server-start))

  ;;tab-width
  (setq tab-width 4)

#+END_SRC

* org-capture
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/org_note/inbox.org")
  (setq org-capture-templates
		'(("n" "note" entry (file+headline "~/mynote/note.org" "Note") "** %^{title}\n%U\n\n%c")
		  ("c" "code" entry (file+headline "~/mynote/note.org" "Note") "** %^{title}\n%U\n\n#+begin_src\n%c\n#+end_src")))
#+end_src
* UI
#+BEGIN_SRC emacs-lisp
  ;;theme
  (use-package dracula-theme
	:ensure t
	:config
	(set-cursor-color "#00ff00")
	(load-theme 'dracula))

  (use-package doom-modeline
	:ensure t
	:init (doom-modeline-mode 1)
	:config
	(setq doom-modeline-major-mode-icon nil)
	(setq doom-modeline-height 1)
	(set-face-attribute 'mode-line nil :family "Source Code Pro" :height 150)
	(set-face-attribute 'mode-line-inactive nil :family "Source Code Pro" :height 150))

  ;; set transparency
  (set-frame-parameter (selected-frame) 'alpha '(90 90))
  (add-to-list 'default-frame-alist '(alpha 90 90))

  ;; (require 'nano)
  ;; (require 'nano-theme-dark)

  ;;font
  (add-to-list 'default-frame-alist `(font . ,my-font))
  (unless is-on-linux
	(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))

  ;;hide tool bar
  (tool-bar-mode -1)

  ;;hide scroll bar
  (scroll-bar-mode -1)

  ;;hide menu bar
  ;; (unless (display-graphic-p)
  ;;   (menu-bar-mode -1))
  (menu-bar-mode -1)

  ;;show line number
  (global-linum-mode t)

  ;;disable welcome page
  (setq inhibit-splash-screen t)

  ;;default open with full screen
  (setq initial-frame-alist (quote ((fullscreen . maximized))))

  ;;set cursor type
  (setq-default cursor-type 'box)
  (set-cursor-color "#00ff00")
  (blink-cursor-mode 0)

  ;;show match ()
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

  ;;highlight current line
  (when (display-graphic-p)
	(global-hl-line-mode))

  (setq visible-bell nil)

  ;;Display lambda as λ
  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-alist '(("lambda" . 955)))

#+END_SRC

* Keybindings
** general
#+BEGIN_SRC emacs-lisp
  (general-create-definer my-leader-def
	:states '(normal insert visual emacs)
	:keymaps 'override
	:prefix "SPC"
	:non-normal-prefix "C-,")

  (general-define-key
   :states '(normal visual)
   "." 'avy-goto-char)

  (general-define-key
   "<f5>" 'revert-buffer
   "M-x" 'helm-M-x
   "M-y" 'helm-show-kill-ring
   "M-RET" 'lsp-execute-code-action

   "C-s" 'helm-swoop-without-pre-input
   "C-x C-b" 'helm-mini
   "C-x b" 'bufler-list
   "C-x C-f" 'helm-find-files)
#+END_SRC
** leader-keys
*** a-key
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"<SPC>" 'helm-M-x
	"r" 'helm-mini
	"k" '((lambda ()
			(interactive)
			(progn
			  (kill-current-buffer)
			  (when (> (length (window-list)) 1)
				(delete-window))))
		  :wk "kill-buffer")
	"]" 'dumb-jump-go
	"[" 'dumb-jump-back)
#+END_SRC
*** buffer
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"b" '(:wk "buffer")

	"<tab>" 'evil-switch-to-windows-last-buffer
	"bb" 'bufler
	"bx" 'kill-current-buffer
	"bs" '(hydra-buffer/body :wk "switch buffer"))
#+END_SRC
*** commenter
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"c" '(:wk "commenter")

	"cc" 'evilnc-comment-or-uncomment-lines
	"cp" 'evilnc-copy-and-comment-lines
	"cb" 'evilnc-comment-or-uncomment-paragraphs)
#+END_SRC
*** file
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"f" '(:wk "file")

	"fe" '((lambda () (interactive) (find-file "~/.emacs.d/myinit.org"))
		   :wk "open config")
	"ff" 'helm-find-files
	"fr" 'helm-recentf
	"fR" 'revert-buffer
	"fd" 'dired
	"fs" 'save-buffer
	"fS" 'save-some-buffers
	"ft" 'neotree-toggle
	"fp" '(lambda () (interactive) (when (file-exists-p (current-kill 0))
								(find-file (current-kill 0)))))
#+END_SRC
*** git
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"g" '(:wk "git")

	"gg" 'magit-status
	"gd" 'hydra-diff-hl/body)
#+END_SRC
*** jump
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"j" '(:wk "jump")

	"jg" 'dumb-jump-go
	"jb" 'dumb-jump-back
	"jq" 'dumb-jump-quick-look
	"jj" 'avy-goto-char-timer
	"jw" 'avy-goto-word-1
	"jl" 'avy-goto-line)
#+END_SRC
*** language
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"l" '(:wk "language")

	"lR" 'quickrun)
#+END_SRC
*** music
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	;; music
	"m" '(:wk "music")
	"mM" '(hydra-bongo/body :wk "music")
	"mm" '(init-goto-bongo :wk "goto music")
	"m <SPC>" 'bongo-pause/resume
	"ms" 'bongo-pause/resume
	"mr" 'bongo-play-random
	"mn" 'bongo-play-next
	"mp" 'bongo-play-previous
	"mf" 'bongo-seek-forward-10
	"mF" 'bongo-seek-forward-60
	"mb" 'bongo-seek-backward-10
	"mB" 'bongo-seek-backward-60)
#+END_SRC
*** note
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"n" '(:wk "note")
	"nn" 'org-capture)
#+END_SRC
*** project
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"p" '(:wk "project")

	"pp" 'projectile-command-map
	"pt" 'projectile-run-vterm
	"ps" 'helm-multi-swoop-projectile)
#+END_SRC
*** quit
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"q" '(:wk "quit")
	"qq" 'save-buffers-kill-terminal
	"qR" 'restart-emacs)
#+END_SRC
*** search
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"s" '(:wk "search")

	"sa" 'helm-ag
	"ss" 'helm-swoop
	"sS" 'helm-multi-swoop
	"sg" 'google-this
	"sd" 'youdao-dictionary-search-at-point+)
#+END_SRC
*** terminal
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	;; terminal
	"t" '(:wk "terminal")
	"te" 'aweshell-dedicated-toggle
	"tE" 'aweshell-new
	"tt" '((lambda ()
			 (interactive)
			 (if (get-buffer "vterm")
				 (switch-to-buffer "vterm")
			   (vterm)))
		   :wk "vterm")
	"to" '(vterm-other-window :wk "vterm other window")
	"tT" '(vterm :wk "vterm new"))
#+END_SRC
*** toggle
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"T" '(:wk "toggle")

	"Te" 'toggle-company-english-helper

	"Th" '(:wk "toggle-highlight")
	"Thh" '((lambda ()
			  (interactive)
			  (if highlight-thing-mode
				  (highlight-thing-mode -1)
				(highlight-thing-mode 1)))
			:wk "toggle-highlight-thing")

	"Thb" '((lambda ()
			  (interactive)
			  (if highlight-blocks-mode
				  (highlight-blocks-mode -1)
				(highlight-blocks-mode 1)))
			:wk "toggle-highlight-blocks")

	"Tt" '((lambda ()
			 (interactive)
			 (let ((alpha (frame-parameter nil 'alpha)))
			   (set-frame-parameter
				nil 'alpha
				(if (eql (cond ((numberp alpha) alpha)
							   ((numberp (cdr alpha)) (cdr alpha))
							   ;; Also handle undocumented (<active> <inactive>) form.
							   ((numberp (cadr alpha)) (cadr alpha)))
						 100)
					'(85 . 50) '(100 . 100)))))
		   :wk "toggle-transparency"))
#+END_SRC
*** window
#+BEGIN_SRC emacs-lisp
  (my-leader-def
	"w" '(:wk "window")

	"ww" 'hydra-window/body
	"wt" 'awesome-fast-switch/body
	"wh" 'windmove-left
	"wj" 'windmove-down
	"wk" 'windmove-up
	"wl" 'windmove-right
	"wH" 'windmove-swap-states-left
	"wJ" 'windmove-swap-states-down
	"wK" 'windmove-swap-states-up
	"wL" 'windmove-swap-states-right
	"wg" 'ace-window
	"ws" 'ace-swap-window
	"w/" 'split-window-right
	"w?" 'split-window-below
	"wm" 'delete-other-windows
	"wd" 'delete-window)
#+END_SRC

** major-mode-keys
*** bufler-list-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'bufler-list-mode-map
   "r" 'bufler-list
   "q" '(lambda ()
		  (interactive)
		  (progn
			(kill-current-buffer)
			(when (> (length (window-list)) 1)
			  (delete-window))))
   "d" '(lambda ()
		  (interactive)
		  (when
			  (yes-or-no-p "kill buffer?")
			(bufler-list-buffer-kill)))
   "s" 'bufler-list-buffer-save
   "RET" 'bufler-list-buffer-switch)
#+END_SRC
*** bongo-playlist-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'bongo-playlist-mode-map
   "RET" 'bongo-play
   "TAB" 'bongo-toggle-collapsed
   "J" 'bongo-next-header-line
   "K" 'bongo-previous-header-line
   "r" 'bongo-play-random
   "s" 'bongo-pause/resume
   "f" 'bongo-seek-forward-10
   "F" 'bongo-seek-forward-60
   "b" 'bongo-seek-backward-10
   "B" 'bongo-seek-backward-60
   "q" 'evil-switch-to-windows-last-buffer
   "Q" 'bongo-stop)
#+END_SRC
*** dired-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'dired-mode-map
   "O" 'dired-do-shell-command
   "Y" 'dired-ranger-copy
   "p" 'dired-ranger-paste
   "P" 'dired-ranger-move)
#+END_SRC
*** python-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix "SPC"
   :keymaps 'python-mode-map
   "l" '(:wk "python")
   "lf" 'lsp-format-buffer
   "lr" 'lsp-rename
   "ld" 'lsp-find-definition)
#+END_SRC
*** org-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix "SPC"
   :keymaps 'org-mode-map
   "l" '(:wk "org")
   "ll" 'org-babel-remove-result
   "lr" 'org-ctrl-c-ctrl-c
   "lt" 'org-insert-structure-template)
#+END_SRC
