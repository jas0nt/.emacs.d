#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* General Config
#+BEGIN_SRC emacs-lisp

;;custom file
(setq custom-file (expand-file-name "~/.emacs.d/custom.el" user-emacs-directory))
(load-file custom-file)

;;ido mode
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode t)

;;diable error tone
(setq ring-bell-function 'ignore)

;;no backup file
(setq make-backup-files nil)
(setq auto-save-default nil)

;;show recent file
(recentf-mode 1)
(setq recentf-max-menu-items 15)

;;delete selection
(delete-selection-mode 1)

;;paste from clipboard
(setq x-select-enable-clipboard t)

;;replace Yes/No with y/n
(fset 'yes-or-no-p 'y-or-n-p)

;;lazy load
(with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
    
;;revert buffer
(global-set-key (kbd "<f5>") 'revert-buffer)

;;exec-path
(add-to-list 'exec-path "/usr/local/bin")

#+END_SRC

* ibuffer
#+BEGIN_SRC emacs-lisp
  ;;buffer
  (defalias 'list-buffers 'ibuffer)
  (global-set-key (kbd "C-x b") 'ibuffer)

  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("emacs" (or
			   (name . "^\\*dashboard\\*$")
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*Messages\\*$")
			   ))
		 ("dired" (mode . dired-mode))
		 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		 ("programming" (or
				 (mode . java-mode)
				 (mode . python-mode)
				 (name .  "^.*java")
				 (name .  "^.*py")
				 (name .  "^.*sql")
				 (name .  "^.*html")
				 ))
		 ("restclient" (mode . restclient-mode))
		 ("org" (name . "^.*org$"))
		 ("magit" (mode . magit-mode))
		 ))))
  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-auto-mode 1)
	      (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
* Packages

** elpa

#+BEGIN_SRC emacs-lisp
(require 'package)
;;elpa
(setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
			 ("melpa" . "http://elpa.emacs-china.org/melpa/")))
(package-initialize)
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

** try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** solarized-theme

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (when (display-graphic-p)
      (load-theme 'solarized-dark t))
    )
#+END_SRC

** spacemacs-theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-common
    :ensure spacemacs-theme
    :config
    (unless (display-graphic-p)
      (load-theme 'spacemacs-dark t))
    )
#+END_SRC

** company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t)
    )

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode))
#+END_SRC

** company-tabnine
#+BEGIN_SRC emacs-lisp
  (use-package company-tabnine
    :ensure t
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+END_SRC

** ag
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t)
#+END_SRC

** helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("C-s" . helm-occur)
	   ("C-x C-r" . helm-recentf)
	   ("C-x C-f" . helm-find-files)
	   ("C-x C-b" . helm-mini)
	   ("M-y" . helm-show-kill-ring)))

  (use-package helm-ag
    :ensure t)
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

** neotree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t)
#+END_SRC

** youdao-dictionary

#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
  :ensure t
  :bind (("C-c d" . youdao-dictionary-search-at-point-tooltip)))
#+END_SRC

** google-this

#+BEGIN_SRC emacs-lisp
(use-package google-this
  :ensure t)
#+END_SRC

** ace-window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inhrit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC

** avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-x j" . avy-goto-char)
	   ("C-x J" . avy-goto-char-2)))
#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    )

  (use-package evil-collection
    :after (evil)
    :ensure t
    :init
    (setq evil-collection-company-use-tng nil)
    :config
    (evil-collection-init))
#+END_SRC

** evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :after evil
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "<SPC>" 'helm-M-x

      ;; file
      "ff" 'helm-find-files
      "fr" 'helm-recentf
      "fd" 'dired
      "fs" 'save-buffer
      "fS" 'save-some-buffers

      ;; buffer
      "bb" 'helm-mini
      "bB" 'ibuffer
      "bs" 'hydra-buffer/body

      "g" 'magit-status

      ;; jump
      "jg" 'dumb-jump-go
      "jb" 'dumb-jump-back
      "jq" 'dumb-jump-quick-look
      "jj" 'avy-goto-char
      "jJ" 'avy-goto-char-2
      "j." 'meghanada-jump-declaration
      "j," 'meghanada-back-jump

      ;; search
      "ss" 'helm-occur
      "sg" 'google-this
      "sd" 'youdao-dictionary-search-at-point-tooltip

      ;; window
      "w" 'hydra-window/body

      ;; project
      "p" 'projectile-command-map

      ;; zzz-to-char
      "z" 'zzz-to-char
      ))
#+END_SRC

** restclient

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode)
    )
  (use-package company-restclient
    :ensure t
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC

** undo-tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC

** hungry-delete & aggresive-indent

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC

** expand-region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** aweshell
;;#+BEGIN_SRC emacs-lisp
  (require 'aweshell)
  (global-set-key (kbd "C-x t") 'aweshell-dedicated-toggle)
  (global-set-key (kbd "C-x C-t") 'aweshell-new)
;;#+END_SRC

** better-shell
#+BEGIN_SRC emacs-lisp
  (use-package better-shell
    :ensure t
    :bind (("C-x t" . better-shell-shell)))
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm))

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))
#+END_SRC

** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (progn
      (dumb-jump-mode)
      (setq dumb-jump-selector 'helm)
      )
    :bind (("C-c j g" . dumb-jump-go)
	   ("C-c j b" . dumb-jump-back)
	   ("C-c j q" . dumb-jump-quick-look)))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
  (use-package evil-magit
    :ensure t)
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 2)
    (setq dashboard-items '((recents  . 10)
			    (projects . 5)
			    (bookmarks . 5)
			    ))
    )
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-color "#00FF00")
    )
#+END_SRC

** dimmer
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :ensure t
    :config
    (dimmer-configure-which-key)
    (dimmer-configure-helm)
    (dimmer-mode t)
    )
#+END_SRC

** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC

** meghanada
#+BEGIN_SRC emacs-lisp
  (use-package meghanada
    :ensure t
    :bind (("C-c j ." . meghanada-jump-declaration)
	   ("C-c j ," . meghanada-back-jump))
    :config
    (add-hook 'java-mode-hook
	      (lambda ()
		;; meghanada-mode on
		(meghanada-mode t)
		;; enable telemetry
		(meghanada-telemetry-enable t)
		(flycheck-mode +1)
		(setq c-basic-offset 2)
		;; use code format
		(add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
    (cond
     ((eq system-type 'windows-nt)
      (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
      (setq meghanada-maven-path "mvn.cmd"))
     (t
      (setq meghanada-java-path "java")
      (setq meghanada-maven-path "mvn")))
    )
#+END_SRC

** zzz-to-char
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind (("M-z" . zzz-to-char)))
#+END_SRC

** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure hydra
    :init
    (global-set-key
     (kbd "C-x w")
     (defhydra hydra-window ()
       "window"
       ("h" windmove-left)
       ("j" windmove-down)
       ("k" windmove-up)
       ("l" windmove-right)
       ("v" (lambda ()
	      (interactive)
	      (split-window-right)
	      (windmove-right))
	"vert")
       ("x" (lambda ()
	      (interactive)
	      (split-window-below)
	      (windmove-down))
	"horz")
       ("g" ace-window)
       ("s" ace-swap-window)
       ("d" ace-delete-window)
       ("m" delete-other-windows "maximize" :color blue)
       ("q" nil "cancel")
       ))

    (global-set-key
     (kbd "C->")
     (defhydra hydra-multiple-cursors ()
       "multiple-cursors"
       ("m" mc/mark-next-like-this)
       ("M" mc/mark-previous-like-this)
       ("u" mc/unmark-next-like-this)
       ("U" mc/unmark-previous-like-this)
       ("s" mc/skip-to-next-like-this)
       ("S" mc/skip-to-previous-like-this)

       ("w" mc/mark-next-like-this-word)
       ("W" mc/mark-next-like-this-word)
       ))

    (defhydra hydra-buffer ()
      "buffer"
      ("j" switch-to-next-buffer)
      ("k" switch-to-prev-buffer)
      ("q" nil "cancel"))

    )
#+END_SRC

** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (add-hook 'multiple-cursors-mode-enabled-hook (lambda () (global-hungry-delete-mode -1)))
    (add-hook 'multiple-cursors-mode-disabled-hook (lambda () (global-hungry-delete-mode 1)))
    )
#+END_SRC

** java packages
#+BEGIN_SRC emacs-lisp
  (use-package autodisass-java-bytecode
    :ensure t
    :defer t)

  (use-package google-c-style
    :defer t
    :ensure t
    :commands
    (google-set-c-style))

  (use-package meghanada
    :defer t
    :init
    (add-hook 'java-mode-hook
	      (lambda ()
		(google-set-c-style)
		(google-make-newline-indent)
		(meghanada-mode t)
		(smartparens-mode t)
		(rainbow-delimiters-mode t)
		(highlight-symbol-mode t)
		(add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))

    :config
    (use-package realgud
      :ensure t)
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (setq c-basic-offset 2)
    (setq meghanada-server-remote-debug t)
    (setq meghanada-javac-xlint "-Xlint:all,-processing")
    :bind
    (:map meghanada-mode-map
	  ("C-S-t" . meghanada-switch-testcase)
	  ("M-RET" . meghanada-local-variable)
	  ("C-M-." . helm-imenu)
	  ("M-r" . meghanada-reference)
	  ("M-t" . meghanada-typeinfo)
	  ("C-z" . hydra-meghanada/body))
    :commands
    (meghanada-mode))

  (defhydra hydra-meghanada (:hint nil :exit t)
    "
  ^Edit^                           ^Tast or Task^
  ^^^^^^-------------------------------------------------------
  _f_: meghanada-compile-file      _m_: meghanada-restart
  _c_: meghanada-compile-project   _t_: meghanada-run-task
  _o_: meghanada-optimize-import   _j_: meghanada-run-junit-test-case
  _s_: meghanada-switch-test-case  _J_: meghanada-run-junit-class
  _v_: meghanada-local-variable    _R_: meghanada-run-junit-recent
  _i_: meghanada-import-all        _r_: meghanada-reference
  _g_: magit-status                _T_: meghanada-typeinfo
  _l_: helm-ls-git-ls
  _q_: exit
  "
    ("f" meghanada-compile-file)
    ("m" meghanada-restart)

    ("c" meghanada-compile-project)
    ("o" meghanada-optimize-import)
    ("s" meghanada-switch-test-case)
    ("v" meghanada-local-variable)
    ("i" meghanada-import-all)

    ("g" magit-status)
    ("l" helm-ls-git-ls)

    ("t" meghanada-run-task)
    ("T" meghanada-typeinfo)
    ("j" meghanada-run-junit-test-case)
    ("J" meghanada-run-junit-class)
    ("R" meghanada-run-junit-recent)
    ("r" meghanada-reference)

    ("q" exit)
    ("z" nil "leave"))
#+END_SRC

** yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** dired

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alht")
  (use-package dired-icon
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'dired-icon-mode))

  (use-package dired-k
    :ensure t
    :config
    (add-hook 'dired-initial-position-hook 'dired-k)
    (add-hook 'dired-after-readin-hook #'dired-k-no-revert)
    (setq dired-k-human-readable t))
#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp

  ;;font
  (add-to-list 'default-frame-alist
	       '(font . "Source Code Pro-14"))

  ;;hide tool bar
  (tool-bar-mode -1)

  ;;hide scroll bar
  (scroll-bar-mode -1)

  ;;hide menu bar
  ;;(menu-bar-mode -1)

  ;;show line number
  (global-linum-mode t)

  ;;disable welcome page
  (setq inhibit-splash-screen t)

  ;;default open with full screen
  (setq initial-frame-alist (quote ((fullscreen . maximized))))

  ;;set cursor type
  (setq-default cursor-type 'box)
  (set-cursor-color "#00ff00")
  (blink-cursor-mode 0)

  ;;show match ()
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

  ;;show parent fun
  (defadvice show-paren-function (around fix-show-paren-function activate)
    (cond ((looking-at-p "\\s(") ad-do-it)
	  (t (save-excursion
	       (ignore-errors (backward-up-list))
	       ad-do-it)))
    )

  ;;highlight current line
  (when (display-graphic-p)
    (global-hl-line-mode))

  (setq visible-bell nil)

#+END_SRC
