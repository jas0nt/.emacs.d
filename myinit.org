#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* General Config
#+BEGIN_SRC emacs-lisp

;;custom file
(setq custom-file (expand-file-name "~/.emacs.d/custom.el" user-emacs-directory))
(load-file custom-file)

;;ido mode
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode t)

;;diable error tone
(setq ring-bell-function 'ignore)

;;no backup file
(setq make-backup-files nil)
(setq auto-save-default nil)

;;show recent file
(recentf-mode 1)
(setq recentf-max-menu-items 15)

;;delete selection
(delete-selection-mode 1)

;;paste from clipboard
(setq x-select-enable-clipboard t)

;;replace Yes/No with y/n
(fset 'yes-or-no-p 'y-or-n-p)

;;lazy load
(with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
    
;;revert buffer
(global-set-key (kbd "<f5>") 'revert-buffer)

;;exec-path
(add-to-list 'exec-path "/usr/local/bin")

;;emacs deamon
(server-start)

;;tab-with
(setq tab-with 4)

#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp

  ;;font
  (add-to-list 'default-frame-alist
	       '(font . "Source Code Pro-14"))

  ;;hide tool bar
  (tool-bar-mode -1)

  ;;hide scroll bar
  (scroll-bar-mode -1)

  ;;hide menu bar
  ;;(menu-bar-mode -1)

  ;;show line number
  (global-linum-mode t)

  ;;disable welcome page
  (setq inhibit-splash-screen t)

  ;;default open with full screen
  (setq initial-frame-alist (quote ((fullscreen . maximized))))

  ;;set cursor type
  (setq-default cursor-type 'box)
  (set-cursor-color "#00ff00")
  (blink-cursor-mode 0)

  ;;show match ()
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

  ;;highlight current line
  (when (display-graphic-p)
    (global-hl-line-mode))

  (setq visible-bell nil)

  ;;Display lambda as Î»
  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-alist '(("lambda" . 955)))

#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
  ;;buffer
  (defalias 'list-buffers 'ibuffer)
  (global-set-key (kbd "C-x b") 'ibuffer)

  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("org" (name . "^.*org$"))
		 ("emacs" (or
			   (name . "^\\*dashboard\\*$")
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*Messages\\*$")
			   ))
		 ("dired" (mode . dired-mode))
		 ("shell" (or
			   (mode . eshell-mode)
			   (mode . shell-mode)
			   (mode . vterm-mode)
			   ))
		 ("programming" (or
				 (mode . java-mode)
				 (mode . python-mode)
				 (name .  "^.*java")
				 (name .  "^.*py")
				 (name .  "^.*sql")
				 (name .  "^.*html")
				 ))
		 ("restclient" (mode . restclient-mode))
		 ("magit" (mode . magit-mode))
		 ))))
  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-auto-mode 1)
	      (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
* Packages
  
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inhrit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy :ensure t)
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-color "#00FF00")
    )
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    (global-company-mode t)
    )

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode))
#+END_SRC

** company-tabnine
#+BEGIN_SRC emacs-lisp
  (use-package company-tabnine
    :ensure t
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 2)
    (setq dashboard-items '((recents  . 10)
			    (projects . 5)
			    (bookmarks . 5)
			    ))
    )
#+END_SRC

** dimmer
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :ensure t
    :config
    (dimmer-configure-which-key)
    (dimmer-configure-helm)
    (dimmer-mode t)
    )
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alht")
  (use-package dired-icon
    :ensure t
    :config
    (when (display-graphic-p)
      (add-hook 'dired-mode-hook 'dired-icon-mode)))

  (use-package dired-k
    :ensure t
    :config
    (add-hook 'dired-initial-position-hook 'dired-k)
    (add-hook 'dired-after-readin-hook #'dired-k-no-revert)
    (setq dired-k-human-readable t))
#+END_SRC
** dracula-theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (set-cursor-color "#00ff00"))
#+END_SRC

** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (progn
      (dumb-jump-mode)
      (setq dumb-jump-selector 'helm)))
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after (evil)
    :ensure t
    :init
    (setq evil-collection-company-use-tng nil)
    :config
    (evil-collection-init))
#+END_SRC

** evil-leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :after evil
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "<SPC>" 'helm-M-x

      ;; evil-nerd-commenter
      "ci" 'evilnc-comment-or-uncomment-lines
      "cc" 'evilnc-copy-and-comment-lines
      "cp" 'evilnc-comment-or-uncomment-paragraphs
      "cr" 'comment-or-uncomment-region

      ;; file
      "ff" 'helm-find-files
      "fr" 'helm-recentf
      "fd" 'dired
      "fs" 'save-buffer
      "fS" 'save-some-buffers
      "ft" 'neotree-toggle

      ;; buffer
      "<tab>" 'evil-switch-to-windows-last-buffer
      "bb" 'helm-mini
      "bB" 'ibuffer
      "bx" 'kill-current-buffer
      "bs" 'hydra-buffer/body

      ;; git
      "gg" 'magit-status
      "gd" 'hydra-diff-hl/body

      ;; jump
      "jg" 'dumb-jump-go
      "jb" 'dumb-jump-back
      "jq" 'dumb-jump-quick-look
      "jj" 'avy-goto-char
      "jJ" 'avy-goto-char-2

      ;; meghanada
      "mf" 'meghanada-code-beautify
      "mj" 'meghanada-jump-declaration
      "mb" 'meghanada-back-jump
      "mi" 'meghanada-import-at-point
      "mI" 'meghanada-import-all

      ;; quit
      "qq" 'save-buffers-kill-terminal
      "qR" 'restart-emacs

      ;; search
      "ss" 'helm-swoop
      "sS" 'helm-multi-swoop
      "sg" 'google-this
      "sd" 'youdao-dictionary-search-at-point+

      ;; terminal
      "'" '(lambda ()
	     (interactive)
	     (if (get-buffer "vterm")
		 (switch-to-buffer "vterm")
	       (vterm)))
      "tt" 'vterm-other-window

      ;; window
      "ww" 'hydra-window/body
      "wh" 'evil-window-left
      "wj" 'evil-window-down
      "wk" 'evil-window-up
      "wl" 'evil-window-right
      "wH" 'evil-window-move-far-left
      "wJ" 'evil-window-move-very-bottom
      "wK" 'evil-window-move-very-top
      "wL" 'evil-window-move-far-right
      "wm" 'delete-other-windows
      "wd" 'delete-window

      ;; project
      "pp" 'projectile-command-map
      "p'" 'projectile-run-vterm
      "ps" 'helm-multi-swoop-projectile

      ;; zzz-to-char
      "z" 'zzz-to-char
      ))
#+END_SRC

** evil-nerd-commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter :ensure t)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** google-this
#+BEGIN_SRC emacs-lisp
(use-package google-this
  :ensure t)
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("M-y" . helm-show-kill-ring)))

  (use-package helm-ag :ensure t)

  (use-package helm-swoop :ensure t
    :bind (("C-s" . helm-swoop-without-pre-input)))
#+END_SRC

** highlight-thing
#+BEGIN_SRC emacs-lisp
  (use-package highlight-thing :ensure t)
#+END_SRC
** hungry-delete & aggresive-indent
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC

** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure hydra
    :init
    (global-set-key
     (kbd "C-x w")
     (defhydra hydra-window ()
       "window"
       ("h" windmove-left)
       ("j" windmove-down)
       ("k" windmove-up)
       ("l" windmove-right)
       ("v" (lambda ()
	      (interactive)
	      (split-window-right)
	      (windmove-right))
	"vert")
       ("x" (lambda ()
	      (interactive)
	      (split-window-below)
	      (windmove-down))
	"horz")
       ("g" ace-window)
       ("s" ace-swap-window)
       ("d" ace-delete-window)
       ("m" delete-other-windows "maximize" :color blue)
       ("q" nil "cancel")
       ))

    (global-set-key
     (kbd "C->")
     (defhydra hydra-multiple-cursors ()
       "multiple-cursors"
       ("m" mc/mark-next-like-this "mark-next-like-this")
       ("M" mc/mark-previous-like-this "mark-previous-like-this")
       ("u" mc/unmark-next-like-this "unmark-next-like-this")
       ("U" mc/unmark-previous-like-this "unmark-previous-like-this")
       ("s" mc/skip-to-next-like-this "skip-to-next-like-this")
       ("S" mc/skip-to-previous-like-this "skip-to-previous-like-this")

       ("w" mc/mark-next-like-this-word "mark-next-like-this-word")
       ("W" mc/mark-next-like-this-word "mark-next-like-this-word")
       ))

    (defhydra hydra-buffer ()
      "buffer"
      ("j" switch-to-next-buffer)
      ("k" switch-to-prev-buffer)
      ("q" nil "cancel"))

    )
#+END_SRC

** ialign
#+BEGIN_SRC emacs-lisp
  (use-package ialign :ensure t)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
  (use-package evil-magit :ensure t)
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode)
    (defhydra hydra-diff-hl ()
      "buffer"
      ("j" diff-hl-next-hunk)
      ("k" diff-hl-previous-hunk)
      ("x" diff-hl-revert-hunk)
      ("q" nil "cancel"))
    )

#+END_SRC

** meghanada
#+BEGIN_SRC emacs-lisp
  (use-package meghanada
    :ensure t
    :bind (
	   ("s-]" . meghanada-jump-declaration)
	   ("s-[" . meghanada-back-jump)
	   )
    :config
    (add-hook 'java-mode-hook
	      (lambda ()
		;; meghanada-mode on
		(meghanada-mode t)
		;; enable telemetry
		(meghanada-telemetry-enable t)
		(flycheck-mode +1)
		(setq c-basic-offset 4)
		;; use code format
		(add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
    (cond
     ((eq system-type 'windows-nt)
      (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
      (setq meghanada-maven-path "mvn.cmd"))
     (t
      (setq meghanada-java-path "java")
      (setq meghanada-maven-path "mvn")))
    )
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (add-hook 'multiple-cursors-mode-enabled-hook (lambda () (global-hungry-delete-mode -1)))
    (add-hook 'multiple-cursors-mode-disabled-hook (lambda () (global-hungry-delete-mode 1)))
    )
#+END_SRC

** neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree :ensure t)
#+END_SRC

** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    ;(setq org-bullets-bullet-list '("â°" "â·" "â¯" "â­"))
    (setq org-bullets-bullet-list '("à¼" "à¼" "à¼" "à¿"))
    (setq org-ellipsis " â¼ "))
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm))

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))
#+END_SRC

** python
##+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    (setq elpy-rpc-python-command "python3")
    (setq python-shell-interpreter "python3")
    )
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC

** restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs :ensure t)
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode)
    )
  (use-package company-restclient
    :ensure t
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC

** try
#+BEGIN_SRC emacs-lisp
  (use-package try :ensure t)
#+END_SRC

** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq vterm-shell "/usr/local/bin/fish")
    )
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; make sure which-key doesn't show normally but refreshes quickly after it is
    ;; triggered.
    (setq which-key-idle-delay 10000)
    (setq which-key-idle-secondary-delay 0.05)
    (which-key-mode)
    )
#+END_SRC

** yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** youdao-dictionary
#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary :ensure t)
#+END_SRC

** zzz-to-char
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char :ensure t)
#+END_SRC

