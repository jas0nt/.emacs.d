#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* Const
#+BEGIN_SRC emacs-lisp
  (defconst jst/emacs-config-file "~/.emacs.d/myinit.org")
  (defconst my-leader-key "<SPC>")
  (defconst main-color "#50fa7b")

  (defconst jst/my-font (if (eq system-type 'gnu/linux)
                    "Source Code Pro-9"
                  "Source Code Pro-14"))

#+END_SRC
* Func
** Common
#+BEGIN_SRC emacs-lisp
  ;;;###autoload
  (defun jst/new-scratch-buffer ()
    "create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
    (interactive)
    (let ((n 0)
          bufname)
      (while (progn
               (setq bufname (concat "*scratch"
                                     (if (= n 0) "" (int-to-string n))
                                     "*"))
               (setq n (1+ n))
               (get-buffer bufname)))
      (switch-to-buffer (get-buffer-create bufname))
      (if (= n 1) (lisp-interaction-mode))))

  ;;;###autoload
  (defun jst/find-config-file ()
    "open emacs config file"
    (interactive)
    (find-file jst/emacs-config-file))

  ;;;###autoload
  (defun jst/reload-config-file ()
    "reload emacs config file"
    (interactive)
    (org-babel-load-file (expand-file-name jst/emacs-config-file)))

  ;;;###autoload
  (defun jst/find-file-in-clipboard ()
    "open file in clipboard"
    (interactive)
    (when (file-exists-p (current-kill 0))
      (find-file (current-kill 0))))

  ;;;###autoload
  (defun jst/toggle-ui-transparency ()
    "toggle UI transparency"
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(85 . 50) '(100 . 100)))))

  ;;;###autoload
  (defun jst/kill-current-buffer ()
    "kill current buffer but keep the last window"
    (interactive)
    (progn
      (kill-current-buffer)
      (when (> (length (window-list)) 1)
        (delete-window))))

  ;;;###autoload
  (defun jst/string-trim-final-newline (string)
    (let ((len (length string)))
      (cond
       ((and (> len 0) (eql (aref string (- len 1)) ?\n))
        (substring string 0 (- len 1)))
       (t string))))

  ;;;###autoload
  (defun jst/shell-command-to-string-trim (command)
    (jst/string-trim-final-newline (shell-command-to-string command)))
#+END_SRC
** MacOS
#+BEGIN_SRC emacs-lisp
  (defun jst/mac-pbcopy ()
    "copy selected region to system clipboard"
    (interactive)
    (shell-command-on-region (point) (mark) "pbcopy"))

  (defun jst/mac-reveal-in-finder ()
    "reveal current directory in finder"
    (interactive)
    (shell-command "open -R ."))

  ;; control Apple Music
  (defconst jst/mac--music-action-play "play")
  (defconst jst/mac--music-action-pause "pause")
  (defconst jst/mac--music-action-next "next track")
  (defconst jst/mac--music-action-prev "previous track")
  (defconst jst/mac--music-action-status "player state as string")
  (defconst jst/mac--music-action-mute "set mute to true")
  (defconst jst/mac--music-action-unmute "set mute to false")
  (defconst jst/mac--music-status-playing "playing")

  (defun jst/mac--music-do (action)
    "controll MacOS Music app"
    (jst/shell-command-to-string-trim (format "osascript -e \"tell application \\\"Music\\\" to %s\"" action)))

  (defun jst/mac-music-status ()
    (interactive)
    (jst/mac--music-do jst/mac--music-action-status))

  (defun jst/mac-music-launch ()
    (interactive)
    (shell-command "open -a Music"))

  (defun jst/mac-music-play-pause ()
    (interactive)
    (if (equal jst/mac--music-status-playing (jst/mac-music-status))
        (jst/mac--music-do jst/mac--music-action-pause)
      (jst/mac--music-do jst/mac--music-action-play)))

  (defun jst/mac-music-play-next ()
    (interactive)
    (jst/mac--music-do jst/mac--music-action-next)
    (jst/mac--music-do jst/mac--music-action-play))
  (defun jst/mac-music-play-prev ()
    (interactive)
    (jst/mac--music-do jst/mac--music-action-prev))
  (defun jst/mac-music-mute ()
    (interactive)
    (jst/mac--music-do jst/mac--music-action-mute))
  (defun jst/mac-music-unmute ()
    (interactive)
    (jst/mac--music-do jst/mac--music-action-unmute))

#+END_SRC
* Basic
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)

  (defvar better-gc-cons-threshold 134217728 ; 128mb
	"The default value to use for `gc-cons-threshold'.

  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (if (boundp 'after-focus-change-function)
		  (add-function :after after-focus-change-function
				(lambda ()
				  (unless (frame-focus-state)
				    (garbage-collect))))
		(add-hook 'after-focus-change-function 'garbage-collect))
	      (defun gc-minibuffer-setup-hook ()
		(setq gc-cons-threshold (* better-gc-cons-threshold 2)))

	      (defun gc-minibuffer-exit-hook ()
		(garbage-collect)
		(setq gc-cons-threshold better-gc-cons-threshold))

	      (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
	      (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))


  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)

  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)

  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'super)
    (setq mac-pass-command-to-system nil))


  ;;custom file
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el" user-emacs-directory))

  ;;diable error tone
  (setq ring-bell-function 'ignore)

  ;;no backup file
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;;show recent file
  (recentf-mode 1)
  (setq recentf-max-menu-items 15)

  ;;delete selection
  (delete-selection-mode 1)

  ;;paste from clipboard
  (setq x-select-enable-clipboard t)

  ;;replace Yes/No with y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;;exec-path
  (add-to-list 'exec-path "/usr/local/bin")

  ;;emacs deamon
  (if (and (fboundp 'server-running-p) 
         (not (server-running-p)))
   (server-start))

  ;;tab-width
  (setq tab-width 4)
#+end_src

* Config
** initialize package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa"   . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
  ;; install use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (add-to-list 'load-path
	       (expand-file-name (concat user-emacs-directory "elisp")))
#+end_src
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1)
    (setq evil-insert-state-cursor '(hollow "yellow")
          evil-normal-state-cursor '(box "green")))

  (use-package evil-collection
    :after (evil)
    :init
    (setq evil-collection-company-use-tng nil)
    :config
    (evil-collection-init))

  (use-package evil-snipe
    :after (evil)
    :config
    (evil-snipe-mode +1))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-nerd-commenter
    :after (evil))

  (use-package evil-pinyin
    :after (evil)
    :init
    (setq-default evil-pinyin-scheme 'simplified-xiaohe-all)
    (setq-default evil-pinyin-with-search-rule 'always)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (global-evil-pinyin-mode))

  (use-package evil-exchange
    :after (evil)
    :config
    (evil-exchange-install))

  (use-package evil-smartparens
    :after (evil smartparens)
    :hook (smartparens-enabled-hook . evil-smartparens-mode))
#+END_SRC
** edit
#+BEGIN_SRC emacs-lisp
  (use-package expand-region)

  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1))

  (use-package ialign)

  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package yasnippet
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets)

  (use-package undo-tree
    :init
    (global-undo-tree-mode))

  (use-package smartparens
    :config
    (smartparens-global-mode))

  (use-package indent-guide
    :config
    (indent-guide-global-mode))

  (use-package flycheck
    :init
    (global-flycheck-mode))

  (use-package hideshow
    :hook (prog-mode . hs-minor-mode))
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (require 'dired-x)
    (setq dired-guess-shell-alist-user '(("\\.*\\'" "open")))
    (setq dired-use-ls-dired nil))

  (setq dired-listing-switches "-alht")
#+END_SRC
** completion
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
    (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
    (corfu-quit-no-match t)        ;; Automatically quit if there is no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect-first nil)    ;; Disable candidate preselection
    (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    (corfu-scroll-margin 5)        ;; Use scroll margin
    :init
    (corfu-global-mode))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Use dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand)))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  (use-package vertico
    :init
    (vertico-mode))

  (use-package marginalia
    :init
    (marginalia-mode t))

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
  (use-package savehist
    :init
    (savehist-mode))

  (use-package consult
    :config
    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-.")))
#+END_SRC
** version-control
#+BEGIN_SRC emacs-lisp
  (use-package magit)

  (use-package git-messenger
    :init (setq git-messenger:show-detail t
		git-messenger:use-magit-popup t))

  (use-package git-timemachine)
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :diminish
    :defines lsp-clients-python-library-directories
    :commands (lsp-enable-which-key-integration
	       lsp-format-buffer
	       lsp-organize-imports
	       lsp-install-server)
    :custom-face
    (lsp-headerline-breadcrumb-path-error-face
     ((t :underline (:style wave :color ,(face-foreground 'error))
	 :inherit lsp-headerline-breadcrumb-path-face)))
    (lsp-headerline-breadcrumb-path-warning-face
     ((t :underline (:style wave :color ,(face-foreground 'warning))
	 :inherit lsp-headerline-breadcrumb-path-face)))
    (lsp-headerline-breadcrumb-path-info-face
     ((t :underline (:style wave :color ,(face-foreground 'success))
	 :inherit lsp-headerline-breadcrumb-path-face)))
    (lsp-headerline-breadcrumb-path-hint-face
     ((t :underline (:style wave :color ,(face-foreground 'success))
	 :inherit lsp-headerline-breadcrumb-path-face)))

    (lsp-headerline-breadcrumb-symbols-error-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'error)))))
    (lsp-headerline-breadcrumb-symbols-warning-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'warning)))))
    (lsp-headerline-breadcrumb-symbols-info-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'success)))))
    (lsp-headerline-breadcrumb-symbols-hint-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'success)))))
    :hook ((prog-mode . (lambda ()
			  (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode)
			    (lsp-deferred))))
	   (lsp-mode . (lambda ()
			 ;; Integrate `which-key'
			 (lsp-enable-which-key-integration)
			 )))
    :bind (:map lsp-mode-map
		("C-c C-d" . lsp-describe-thing-at-point)
		([remap xref-find-definitions] . lsp-find-definition)
		([remap xref-find-references] . lsp-find-references))
    :init
    ;; @see https://emacs-lsp.github.io/lsp-mode/page/performance
    (setq read-process-output-max (* 1024 1024)) ;; 1MB

    (setq lsp-keymap-prefix "C-c l"
	  lsp-keep-workspace-alive nil
	  lsp-signature-auto-activate nil
	  lsp-modeline-code-actions-enable nil
	  lsp-modeline-diagnostics-enable nil
	  lsp-modeline-workspace-status-enable nil

	  lsp-enable-file-watchers nil
	  lsp-enable-folding nil
	  lsp-enable-symbol-highlighting nil
	  lsp-enable-text-document-color nil

	  lsp-enable-indentation nil
	  lsp-enable-on-type-formatting nil)

    ;; For `lsp-clients'
    (setq lsp-clients-python-library-directories '("/usr/local/" "/usr/"))
    :config
    (with-no-warnings
      ;; Disable `lsp-mode' in `git-timemachine-mode'
      (defun my-lsp--init-if-visible (fn &rest args)
	(unless (bound-and-true-p git-timemachine-mode)
	  (apply fn args)))
      (advice-add #'lsp--init-if-visible :around #'my-lsp--init-if-visible)

      ;; Enable `lsp-mode' in sh/bash/zsh
      (defun my-lsp-bash-check-sh-shell (&rest _)
	(and (eq major-mode 'sh-mode)
	     (memq sh-shell '(sh bash zsh))))
      (advice-add #'lsp-bash-check-sh-shell :override #'my-lsp-bash-check-sh-shell)

      ;; Only display icons in GUI
      (defun my-lsp-icons-get-symbol-kind (fn &rest args)
	(when (display-graphic-p)
	  (apply fn args)))
      (advice-add #'lsp-icons-get-by-symbol-kind :around #'my-lsp-icons-get-symbol-kind)

      (defun my-lsp-icons-get-by-file-ext (fn &rest args)
	(when (display-graphic-p)
	  (apply fn args)))
      (advice-add #'lsp-icons-get-by-file-ext :around #'my-lsp-icons-get-by-file-ext)

      (defun my-lsp-icons-all-the-icons-material-icon (icon-name face fallback &optional feature)
	(if (and (display-graphic-p)
		 (functionp 'all-the-icons-material)
		 (lsp-icons--enabled-for-feature feature))
	    (all-the-icons-material icon-name
				    :face face)
	  (propertize fallback 'face face)))
      (advice-add #'lsp-icons-all-the-icons-material-icon
		  :override #'my-lsp-icons-all-the-icons-material-icon))

    (defun lsp-update-server ()
      "Update LSP server."
      (interactive)
      ;; Equals to `C-u M-x lsp-install-server'
      (lsp-install-server t)))

  (use-package lsp-ui
    :custom-face
    (lsp-ui-sideline-code-action ((t (:inherit warning))))
    :bind (("C-c u" . lsp-ui-imenu)
	   :map lsp-ui-mode-map
	   ("M-<f6>" . lsp-ui-hydra/body)
	   ("M-RET" . lsp-ui-sideline-apply-code-actions)
	   ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
	   ([remap xref-find-references] . lsp-ui-peek-find-references))
    :hook (lsp-mode . lsp-ui-mode)
    :init (setq lsp-ui-sideline-show-diagnostics nil
		lsp-ui-sideline-ignore-duplicate t
		lsp-ui-doc-delay 0.1
		lsp-ui-doc-position 'at-point
		lsp-ui-doc-border (face-foreground 'font-lock-comment-face nil t)
		lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
				      ,(face-foreground 'font-lock-string-face)
				      ,(face-foreground 'font-lock-constant-face)
				      ,(face-foreground 'font-lock-variable-name-face)))
    :config
    (with-no-warnings
      (defun my-lsp-ui-doc--handle-hr-lines nil
	(let (bolp next before after)
	  (goto-char 1)
	  (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
	    (when (get-text-property next 'markdown-hr)
	      (goto-char next)
	      (setq bolp (bolp)
		    before (char-before))
	      (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
	      (setq after (char-after (1+ (point))))
	      (insert
	       (concat
		(and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
		(propertize "\n" 'face '(:height 0.5))
		(propertize " "
			    ;; :align-to is added with lsp-ui-doc--fix-hr-props
			    'display '(space :height (1))
			    'lsp-ui-doc--replace-hr t
			    'face `(:background ,(face-foreground 'font-lock-comment-face)))
		;; :align-to is added here too
		(propertize " " 'display '(space :height (1)))
		(and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))
      (advice-add #'lsp-ui-doc--handle-hr-lines :override #'my-lsp-ui-doc--handle-hr-lines))

    ;; `C-g'to close doc
    (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

    ;; Reset `lsp-ui-doc-background' after loading theme
    (add-hook 'after-load-theme-hook
	      (lambda ()
		(setq lsp-ui-doc-border (face-foreground 'font-lock-comment-face nil t))
		(set-face-background 'lsp-ui-doc-background (face-background 'tooltip nil t)))))
#+END_SRC
** terminal
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :ensure nil
    :defines eshell-prompt-function
    :functions eshell/alias
    :hook (eshell-mode . (lambda ()
                           (bind-key "C-l" 'eshell/clear eshell-mode-map)
                           (setq-local company-mode nil)
                           ;; Aliases
                           (eshell/alias "f" "find-file $1")
                           (eshell/alias "fo" "find-file-other-window $1")
                           (eshell/alias "d" "dired $1")
                           (eshell/alias "l" "ls -lFh")
                           (eshell/alias "ll" "ls -l")
                           (eshell/alias "la" "ls -lAFh")
                           (eshell/alias "lr" "ls -tRFh")
                           (eshell/alias "lrt" "ls -lFcrt")
                           (eshell/alias "lsa" "ls -lah")
                           (eshell/alias "lt" "ls -ltFh")))
    :config
    (with-no-warnings
      ;; For compatibility
      (unless (fboundp 'flatten-tree)
        (defalias 'flatten-tree #'eshell-flatten-list))

      (defun eshell/clear ()
        "Clear the eshell buffer."
        (interactive)
        (let ((inhibit-read-only t))
          (erase-buffer)
          (eshell-send-input)))

      (defun eshell/emacs (&rest args)
        "Open a file (ARGS) in Emacs.  Some habits die hard."
        (if (null args)
            ;; If I just ran "emacs", I probably expect to be launching
            ;; Emacs, which is rather silly since I'm already in Emacs.
            ;; So just pretend to do what I ask.
            (bury-buffer)
          ;; We have to expand the file names or else naming a directory in an
          ;; argument causes later arguments to be looked for in that directory,
          ;; not the starting directory
          (mapc #'find-file (mapcar #'expand-file-name (flatten-tree (reverse args))))))
      (defalias 'eshell/e #'eshell/emacs)
      (defalias 'eshell/ec #'eshell/emacs)

      (defun eshell/ebc (&rest args)
        "Compile a file (ARGS) in Emacs. Use `compile' to do background make."
        (if (eshell-interactive-output-p)
            (let ((compilation-process-setup-function
                   (list 'lambda nil
                         (list 'setq 'process-environment
                               (list 'quote (eshell-copy-environment))))))
              (compile (eshell-flatten-and-stringify args))
              (pop-to-buffer compilation-last-buffer))
          (throw 'eshell-replace-command
                 (let ((l (eshell-stringify-list (flatten-tree args))))
                   (eshell-parse-command (car l) (cdr l))))))
      (put 'eshell/ebc 'eshell-no-numeric-conversions t)

      (defun eshell-view-file (file)
        "View FILE.  A version of `view-file' which properly rets the eshell prompt."
        (interactive "fView file: ")
        (unless (file-exists-p file) (error "%s does not exist" file))
        (let ((buffer (find-file-noselect file)))
          (if (eq (get (buffer-local-value 'major-mode buffer) 'mode-class)
                  'special)
              (progn
                (switch-to-buffer buffer)
                (message "Not using View mode because the major mode is special"))
            (let ((undo-window (list (window-buffer) (window-start)
                                     (+ (window-point)
                                        (length (funcall eshell-prompt-function))))))
              (switch-to-buffer buffer)
              (view-mode-enter (cons (selected-window) (cons nil undo-window))
                               'kill-buffer)))))

      (defun eshell/less (&rest args)
        "Invoke `view-file' on a file (ARGS).
  \"less +42 foo\" will go to line 42 in the buffer for foo."
        (while args
          (if (string-match "\\`\\+\\([0-9]+\\)\\'" (car args))
              (let* ((line (string-to-number (match-string 1 (pop args))))
                     (file (pop args)))
                (eshell-view-file file)
                (forward-line line))
            (eshell-view-file (pop args)))))
      (defalias 'eshell/more #'eshell/less)))

  (use-package aweshell
    :load-path "~/.emacs.d/elisp/aweshell")
#+END_SRC
** eshell
#+BEGIN_SRC emacs-lisp
  (use-package aweshell
    :load-path "~/.emacs.d/elisp/aweshell")
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :disabled t
    :init
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner "~/.emacs.d/banners/dark_knight.png")
    (setq dashboard-image-banner-max-height 400)
    (setq dashboard-items '((recents . 10)
			    (projects . 7)
			    (bookmarks . 7))))
#+END_SRC
** music
#+BEGIN_SRC emacs-lisp
  (use-package bongo
    :after (hydra)
    ;; :if (eq system-type 'gnu/linux)
    :config
    (setq bongo-logo nil)
    (setq bongo-display-track-icons nil)
    (setq bongo-display-track-lengths nil)
    (setq bongo-display-header-icons nil)
    (setq bongo-display-playback-mode-indicator t)
    (setq bongo-header-line-mode nil)
    (setq bongo-mode-line-indicator-mode nil)
    (setq bongo-field-separator (propertize " · " 'face 'shadow))

    (setq bongo-prefer-library-buffers nil)
    (setq bongo-insert-whole-directory-trees t)
    ;;(setq bongo-join-inserted-tracks nil)
    (setq bongo-enabled-backends '(vlc))

    (defun init-goto-bongo ()
      (interactive)
      (let ((bongo-playlist-buffer-name "*Bongo Playlist*"))
	(unless (get-buffer bongo-playlist-buffer-name)
	  (bongo)
	  (bongo-insert-directory-tree "~/Music/my_music")
	  (goto-char (point-min))
	  (bongo-random-playback-mode))
	(switch-to-buffer bongo-playlist-buffer-name)))

    (defhydra hydra-bongo ()
      ("m" init-goto-bongo "goto-bongo" :color blue)
      ("<SPC>" bongo-pause/resume "play/pause")
      ("r" bongo-play-random "play random")
      ("n" bongo-play-next "play next")
      ("p" bongo-play-previous "play previous")
      ("f" bongo-seek-forward-10 "forward")
      ("F" bongo-seek-forward-60 "Forward")
      ("b" bongo-seek-backward-10 "backward")
      ("B" bongo-seek-backward-60 "Backward")
      ("q" nil "Cancel")))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :config
    (setq python-shell-interpreter "python3"))

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

  ;; python language server
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp)))
    :init
    (when (executable-find "python3")
      (setq lsp-pyright-python-executable-cmd "python3")))

  (use-package flymake-python-pyflakes)
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :commands (org-dynamic-block-define)
    :custom-face (org-ellipsis ((t (:foreground nil))))
    :hook (((org-babel-after-execute org-mode) . org-redisplay-inline-images))
    :config
    ;; To speed up startup, don't put to init section
    (setq org-modules nil                 ; Faster loading
          org-tags-column -80
          org-log-done 'time
          org-catch-invisible-edits 'smart
          org-startup-indented t
          org-ellipsis (if (and (display-graphic-p) (char-displayable-p ?⏷)) " ⏷" nil)
          org-pretty-entities nil
          org-hide-emphasis-markers t)

    ;; Add new template
    (add-to-list 'org-structure-template-alist '("n" . "note"))

    ;; Use embedded webkit browser if possible
    (when (featurep 'xwidget-internal)
      (push '("\\.\\(x?html?\\|pdf\\)\\'"
              .
              (lambda (file _link)
                (xwidget-webkit-browse-url (concat "file://" file))
                (let ((buf (xwidget-buffer (xwidget-webkit-current-session))))
                  (when (buffer-live-p buf)
                    (and (eq buf (current-buffer)) (quit-window))
                    (pop-to-buffer buf)))))
            org-file-apps))

    ;; Babel
    (setq org-confirm-babel-evaluate nil
          org-src-fontify-natively t
          org-src-tab-acts-natively t)

    (defvar load-language-list '((emacs-lisp . t)
                                 (perl . t)
                                 (python . t)
                                 (ruby . t)
                                 (js . t)
                                 (css . t)
                                 (sass . t)
                                 (C . t)
                                 (java . t)
                                 (plantuml . t)))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 load-language-list)

    ;; ob-sh renamed to ob-shell since 26.1.
    (cl-pushnew '(shell . t) load-language-list)

    ;; Use mermadi-cli: npm install -g @mermaid-js/mermaid-cli
    (use-package ob-mermaid
      :init (cl-pushnew '(mermaid . t) load-language-list))

    ;; Add graphical view of agenda
    (use-package org-timeline
      :hook (org-agenda-finalize . org-timeline-insert-timeline))

    ;; Preview
    (use-package org-preview-html)
    )
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-preview-eww)

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** 中文
#+BEGIN_SRC emacs-lisp
  (use-package ace-pinyin
    :config
    (ace-pinyin-global-mode +1))

  (use-package pyim
    :init
    (pyim-default-scheme 'xiaohe-shuangpin)
    :config
    ;; 让 vertico 通过 orderless 支持拼音搜索候选项功能
    (defun my-orderless-regexp (orig_func component)
      (let ((result (funcall orig_func component)))
	(pyim-cregexp-build result)))
    (advice-add 'orderless-regexp :around #'my-orderless-regexp))

  (use-package youdao-dictionary)
  (use-package fanyi)

  ;; 中文输入法
  (use-package rime
    :config
    (unless (eq system-type 'gnu/linux)
      (setq rime-librime-root "~/.emacs.d/librime/dist"))
    (setq rime-posframe-properties
	  (list :background-color "#282a36"
		:foreground-color "#bd93f9"
		:font jst/my-font
		:internal-border-width 10))

    (setq default-input-method "rime"
	  rime-show-candidate 'minibuffer))
#+END_SRC
** other
#+BEGIN_SRC emacs-lisp
  ;; jump between windows
  (use-package ace-window
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inhrit ace-jump-face-foreground :height 3.0)))))))

  (use-package benchmark-init
    :init (benchmark-init/activate)
    :hook (after-init . benchmark-init/deactivate))

  (use-package discover-my-major
    :bind ("C-h C-m" . discover-my-major))

  (use-package google-this)

  (use-package restart-emacs)

  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode))

  (use-package posframe)

  ;; try a package temporarily
  (use-package try)
  (use-package bufler)
  (use-package find-file-in-project)
  (use-package deadgrep)
  (use-package focus)
  (use-package projectile)
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (add-hook 'after-load-theme-hook
              (lambda ()
                (let ((bg (frame-parameter nil 'background-mode)))
                  (set-frame-parameter nil 'ns-appearance bg)
                  (setcdr (assq 'ns-appearance default-frame-alist) bg)))))

  ;; theme
  (use-package dracula-theme
    :init
    (load-theme 'dracula t)
    (set-cursor-color main-color))

  ;; display time
  (display-time-mode 1)
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)

  ;; display battery
  (display-battery-mode 1)


  ;; modeline
  (defconst jst/modeline-bg (face-attribute 'mode-line :background))
  (defun jst/flash-mode-line ()
    (let ((bell-color "#ff5555"))
      (set-face-background 'mode-line bell-color)
      (run-with-timer 0.1 nil #'set-face-background 'mode-line jst/modeline-bg)))

  (setq visible-bell nil
        ring-bell-function 'jst/flash-mode-line)

  (use-package doom-modeline
    :after (all-the-icons)
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-major-mode-icon nil)
    (setq doom-modeline-height 1)
    (set-face-attribute 'mode-line nil :family "Source Code Pro" :height 140)
    (set-face-attribute 'mode-line-inactive nil :family "Source Code Pro" :height 140))

  (use-package awesome-tray
    :disabled t
    :load-path "~/.emacs.d/elisp/awesome-tray"
    :init
    (setq awesome-tray-active-modules
          '("evil" "input-method" "location" "buffer-name" "git" "file-path" "mode-name"))
    :config
    (awesome-tray-mode 1)
    (eval-after-load 'awesome-tray
      '(unless (display-graphic-p) (setq mode-line-format nil))))

  ;; icons
  (use-package all-the-icons)

  (use-package beacon
    :config
    (beacon-mode 1)
    (setq beacon-color main-color))

  ;; set transparency
  ;; (set-frame-parameter (selected-frame) 'alpha '(90 90))
  ;; (add-to-list 'default-frame-alist '(alpha 90 90))

  ;;font
  (add-to-list 'default-frame-alist `(font . ,jst/my-font))
  (when (eq system-type 'darwin)
        (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))

  ;;hide tool bar
  (tool-bar-mode -1)

  ;;hide scroll bar
  (scroll-bar-mode -1)

  (menu-bar-mode -1)

  ;;show line number
  (global-linum-mode t)

  ;;disable welcome page
  (setq inhibit-splash-screen t)

  ;;default open with full screen
  (setq initial-frame-alist (quote ((fullscreen . maximized))))

  ;;set cursor type
  (setq-default cursor-type 'box)
  (set-cursor-color "#00ff00")
  (blink-cursor-mode 0)

  ;;show match ()
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

  ;;highlight current line
  (when (display-graphic-p)
        (global-hl-line-mode))

  (setq visible-bell nil)

  ;;Display lambda as λ
  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-alist '(("lambda" . 955)))
#+END_SRC
* Keybindings
** MacOS
#+BEGIN_SRC emacs-lisp
  ;; set keys for Apple keyboard, for emacs in OS X
  (when (eq system-type 'darwin)
    ;; (setq mac-command-modifier 'meta) ; make cmd key do Meta
    ;; (setq mac-option-modifier 'super) ; make opt key do Super
    (setq mac-control-modifier 'control) ; make Control key do Control
    (setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
    )
#+END_SRC
** general
#+BEGIN_SRC emacs-lisp
  (use-package general)
  (use-package hydra
    :ensure hydra
    :config
    (use-package pretty-hydra))

  (use-package which-key
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))

  (general-create-definer my-leader-def
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix my-leader-key
    :non-normal-prefix "C-,")

  (general-define-key
   :states '(normal visual)
   "`" 'aweshell-dedicated-toggle
   ";" 'switch-to-buffer
   "," 'evil-switch-to-windows-last-buffer
   "." 'evil-avy-goto-char-timer
   "f" 'evil-snipe-f
   "F" 'evil-snipe-F
   "t" 'evil-snipe-t
   "T" 'evil-snipe-T
   "gl" 'evil-avy-goto-line
   "g." 'evil-repeat)

  (general-define-key
   "<f5>" 'revert-buffer
   "C-s" 'consult-line
   "M-y" 'yank-pop
   "M-RET" 'lsp-execute-code-action)
#+END_SRC
** hydras
*** buffer
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-buffer (
                                     :exit t
                                     :foreign-keys warn
                                     :idle 1.0
                                     :quit-key "q")
    ("Actions"
     (("+" er/expand-region "expand-region")
      ("b" bufler "bufler")
      ("s" ido-switch-buffer-other-window "switch buffer other window")
      ("S" jst/new-scratch-buffer "new scratch"))))
#+END_SRC
*** comment
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-comment (
                                      :exit t
                                      :foreign-keys warn
                                      :idle 1.0
                                      :quit-key "q")
    ("comment"
     (("c" evilnc-comment-or-uncomment-lines "toggle comment")
      ("p" evilnc-copy-and-comment-lines "comment & copy")
      ("b" evilnc-comment-or-uncomment-paragraphs "comment block"))))
#+END_SRC
*** file
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-file (
                                   :exit t
                                   :foreign-keys warn
                                   :idle 1.0
                                   :quit-key "q")
    ("find-file"
     (("f" find-file "find-file")
      ("r" consult-recent-file "recentf")
      ("d" dired "dired")
      ("b" bookmark-jump "bookmark")
      ("o" find-file-at-point "find-file-at-point")
      ("p" jst/find-file-in-clipboard "find-file-in-kill-ring"))

     "action"
     (("F" jst/mac-reveal-in-finder "reveal in finder")
      ("R" revert-buffer "revert buffer")
      ("s" save-buffer "save-buffer")
      ("S" save-some-buffers "save-some-buffers"))

     "config-file"
     (("e" jst/find-config-file "open config")
      ("E" jst/reload-config-file "reload config"))))
#+END_SRC
*** git
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-git (
                                  :exit t
                                  :foreign-keys warn
                                  :idle 1.0
                                  :quit-key "q")
    ("git"
     (("g" magit-status "status")
      ("m" git-messenger:popup-message "show msg"))))
#+END_SRC
*** jump
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-jump (
                                   :exit t
                                   :foreign-keys warn
                                   :idle 1.0
                                   :quit-key "q")
    ("goto-char"
     (("j" avy-goto-char-2 "goto-char-2")
      ("J" avy-goto-char "goto-char")
      ("t" avy-goto-char-timer "goto-char-timer"))

     "goto-word"
     (("w" avy-goto-word-1 "goto-word"))

     "goto-line"
     (("l" avy-goto-line "goto-line"))))
#+END_SRC
*** music
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-music (:foreign-keys warn :quit-key "q")
    ("♫"
     (("m" init-goto-bongo "music-player" :exit t)
      ("<SPC>" bongo-pause/resume "play/pause" :exit t))

     "play"
     (("r" bongo-play-random "random")
      ("n" bongo-play-next "next")
      ("p" bongo-play-previous "prev"))

     "ctrl"
     (("f" bongo-seek-forward-10 ">> 10")
      ("F" bongo-seek-forward-60 ">> 60")
      ("b" bongo-seek-backward-10 "<< 10")
      ("B" bongo-seek-backward-60 "<< 60"))

     "Apple Music"
     (("M" jst/mac-music-launch "music app" :exit t)
      ("j" jst/mac-music-play-next "next" :exit nil)
      ("k" jst/mac-music-play-prev "prev" :exit nil)
      ("l" jst/mac-music-play-pause "play/pause" :exit t))))
#+END_SRC
*** quit
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-quit (:exit t :foreign-keys warn :quit-key "q")
    ("❗"
     (("!" save-buffers-kill-terminal "exit emacs")
      ("1" restart-emacs "restart-emacs"))))
#+END_SRC
*** search
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-search (
                                     :exit t
                                     :title "Search"
                                     :foreign-keys warn
                                     :idle 1.0
                                     :quit-key "q")
    ("content"
     (("i" consult-imenu "imenu")
      ("r" consult-ripgrep "rg")
      ("R" deadgrep "rg+")
      ("s" consult-line-multi "multi-buffer"))

     "file"
     (("b" consult-bookmark "bookmark")
      ("f" find-file-in-project "project")
      ("L" consult-locate "locate"))

     "lookup"
     (("g" google-this "google")
      ("d" youdao-dictionary-search-at-point+ "dict")
      ("D" fanyi-dwim2 "fanyi")
      ("l" browse-url "browse-url"))))
#+END_SRC
*** terminal
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-terminal (
                                       :exit t
                                       :foreign-keys warn
                                       :idle 1.0
                                       :quit-key "q")
    ("terminal"
     (("t" aweshell-new "new terminal"))))
#+END_SRC
*** toggle
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define hydra-toggle (:exit t :foreign-keys warn :quit-key "q")
    ("toggle things"
     (("e" toggle-company-english-helper "english-helper")
      ("f" focus-mode "focus-mode")
      ("t" jst/toggle-ui-transparency "transparency"))))
#+END_SRC
*** window
#+BEGIN_SRC emacs-lisp
  (defmacro jst/hydra-window (hydra-name exit)
    `(pretty-hydra-define ,(make-symbol (concat "hydra--window-" hydra-name)) (:hint nil :exit ,exit)
       ("nav"
        (("h" windmove-left "←")
         ("j" windmove-down "↓")
         ("k" windmove-up "↑")
         ("l" windmove-right "→")
         ("g" ace-window "➶"))

        "swap"
        (("H" windmove-swap-states-left "⮌")
         ("J" windmove-swap-states-down "⮏")
         ("K" windmove-swap-states-up "⮍")
         ("L" windmove-swap-states-right "⮎")
         ("s" ace-swap-window "🗘"))

        "split"
        (("/" (lambda ()
                (interactive)
                (split-window-right)
                (windmove-right)) "⦶ vertical")
         ("?" (lambda ()
                (interactive)
                (split-window-below)
                (windmove-down)) "⦵ horizontal"))

        "resize"
        (("0" balance-windows "⊞ balance")
         ("=" enlarge-window "🡙" :exit nil)
         ("-" shrink-window "🡫" :exit nil)
         ("." enlarge-window-horizontally "🡘" :exit nil)
         ("," shrink-window-horizontally "🡨" :exit nil))

        "action"
        (("d" delete-window "X 𐤕")
         ("D" ace-delete-window "X other")
         ("m" delete-other-windows "✡ maximum" :exit t)))))

  (jst/hydra-window "exit" t)
  (jst/hydra-window "noexit" nil)
#+END_SRC
*** leader
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "<SPC>" 'execute-extended-command
    "q" '(jst/kill-current-buffer :wk "kill-buffer")
    "'" 'aweshell-switch-buffer

    "b" 'hydra-buffer/body
    "c" 'hydra-comment/body
    "f" 'hydra-file/body
    "g" 'hydra-git/body
    "j" 'hydra-jump/body
    "m" 'hydra-music/body
    "<ESC>" 'hydra-quit/body
    "s" 'hydra-search/body
    "t" 'hydra-terminal/body
    "T" 'hydra-toggle/body
    "w" 'hydra--window-exit/body
    "W" 'hydra--window-noexit/body)
#+END_SRC
** major-mode-keys
*** bufler-list-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'bufler-list-mode-map
   "r" 'bufler-list
   "q" 'jst/kill-current-buffer
   "d" '(lambda ()
          (interactive)
          (when
              (yes-or-no-p "kill buffer?")
            (bufler-list-buffer-kill)))
   "s" 'bufler-list-buffer-save
   "RET" 'bufler-list-buffer-switch)
#+END_SRC
*** bongo-playlist-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'bongo-playlist-mode-map
   "RET" 'bongo-play
   "TAB" 'bongo-toggle-collapsed
   "J" 'bongo-next-header-line
   "K" 'bongo-previous-header-line
   "r" 'bongo-play-random
   "c" 'bongo-recenter
   "p" 'bongo-pause/resume
   "f" 'bongo-seek-forward-10
   "F" 'bongo-seek-forward-60
   "b" 'bongo-seek-backward-10
   "B" 'bongo-seek-backward-60
   "q" 'bongo-quit
   "Q" 'bongo-stop)
#+END_SRC
*** markdown-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix my-leader-key
   :keymaps 'markdown-mode-map
   "l" '(:wk "md")
   "lp" 'markdown-live-preview-mode)
#+END_SRC
*** python-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix my-leader-key
   :keymaps 'python-mode-map
   "l" '(:wk "python")
   "lf" 'lsp-format-buffer
   "lr" '(lsp-rename :wk "rename")
   "ld" 'lsp-find-definition)
#+END_SRC
*** org-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix my-leader-key
   :keymaps 'org-mode-map
   "l" '(:wk "org")
   "lp" '(grip-mode :wk "preview")
   "ll" 'org-babel-remove-result
   "lr" 'org-ctrl-c-ctrl-c
   "lt" 'org-insert-structure-template)
#+END_SRC
*** term-mode
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'term-mode-map
   "q" '(term-interrupt-subjob :wk "quit"))
#+end_src
