#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* General Config
#+BEGIN_SRC emacs-lisp

;;custom file
(setq custom-file (expand-file-name "~/.emacs.d/custom.el" user-emacs-directory))
(load-file custom-file)

;;ido mode
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode t)

;;buffer
(defalias 'list-buffers 'ibuffer)

;;diable error tone
(setq ring-bell-function 'ignore)

;;no backup file
(setq make-backup-files nil)
(setq auto-save-default nil)

;;show recent file
(recentf-mode 1)
(setq recentf-max-menu-items 15)

;;delete selection
(delete-selection-mode 1)

;;paste from clipboard
(setq x-select-enable-clipboard t)

;;replace Yes/No with y/n
(fset 'yes-or-no-p 'y-or-n-p)

;;lazy load
(with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
    
;;revert buffer
(global-set-key (kbd "<f5>") 'revert-buffer)

;;exec-path
(add-to-list 'exec-path "/usr/local/bin")

#+END_SRC

* ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("dired" (mode . dired-mode))
		 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		 ("programming" (or
				 (mode . java-mode)
				 (mode . python-mode)
				 ))
		 ("restclient" (mode . restclient-mode))
		 ("org" (name . "^.*org$"))
		 ("magit" (mode . magit-mode))
		 ("emacs" (or
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*Messages\\*$")))
		 ))))
  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-auto-mode 1)
	      (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp

  ;;font
  (add-to-list 'default-frame-alist
	       '(font . "Source Code Pro-14"))

  ;;hide tool bar
  (tool-bar-mode -1)

  ;;hide scroll bar
  (scroll-bar-mode -1)

  ;;hide menu bar
  ;;(menu-bar-mode -1)

  ;;show line number
  (global-linum-mode t)

  ;;disable welcome page
  (setq inhibit-splash-screen t)

  ;;default open with full screen
  (setq initial-frame-alist (quote ((fullscreen . maximized))))

  ;;set cursor type
  (setq-default cursor-type 'box)
  (set-cursor-color "#ff69b4")
  (blink-cursor-mode 0)

  ;;show match ()
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

  ;;show parent fun
  (defadvice show-paren-function (around fix-show-paren-function activate)
    (cond ((looking-at-p "\\s(") ad-do-it)
	  (t (save-excursion
	       (ignore-errors (backward-up-list))
	       ad-do-it)))
    )

  ;;highlight current line
  (global-hl-line-mode)

#+END_SRC

* Packages

** elpa

#+BEGIN_SRC emacs-lisp
(require 'package)
;;elpa
(setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
			 ("melpa" . "http://elpa.emacs-china.org/melpa/")))
(package-initialize)
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

** try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** solarized-theme

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :config (load-theme 'solarized-dark t))
#+END_SRC

** company

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t)
  )
#+END_SRC

** ag
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t)
#+END_SRC

** helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("C-s" . helm-occur)
	   ("C-x C-r" . helm-recentf)
	   ("C-x C-f" . helm-find-files)
	   ("M-y" . helm-show-kill-ring)))

  (use-package helm-ag
    :ensure t)
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

** neotree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t)
#+END_SRC

** youdao-dictionary

#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
  :ensure t
  :bind (("C-c d" . youdao-dictionary-search-at-point-tooltip)))
#+END_SRC

** google-this

#+BEGIN_SRC emacs-lisp
(use-package google-this
  :ensure t)
#+END_SRC

** ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inhrit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

** avy

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("C-;" . avy-goto-char)))
#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** evil

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t)
  ;;:config
  ;;(progn
    ;;(evil-mode 1)
    ;;(setcdr evil-insert-state-map nil)
    ;;;;(setq evil-default-state 'emacs)
    ;;(define-key evil-insert-state-map [escape] 'evil-normal-state)
    ;;))
#+END_SRC

** restclient

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
  (use-package company-restclient
    :ensure t
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC

** undo-tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC

** hungry-delete & aggresive-indent

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC

** expand-region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** aweshell
;;#+BEGIN_SRC emacs-lisp
  (require 'aweshell)
  (global-set-key (kbd "C-x t") 'aweshell-dedicated-toggle)
  (global-set-key (kbd "C-x C-t") 'aweshell-new)
;;#+END_SRC

** better-shell
#+BEGIN_SRC emacs-lisp
  (use-package better-shell
    :ensure t
    :bind (("C-x t" . better-shell-shell)))
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm))

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))
#+END_SRC

** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (progn
      (dumb-jump-mode)
      (setq dumb-jump-selector 'helm)
      )
    :bind (("C-c j g" . dumb-jump-go)
	   ("C-c j b" . dumb-jump-back)
	   ("C-c j q" . dumb-jump-quick-look)))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 2)
    (setq dashboard-items '((recents  . 10)
			    (projects . 5)
			    (bookmarks . 5)
			    ))
    )
#+END_SRC
