#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* Const
#+BEGIN_SRC emacs-lisp
  (defconst my-leader-key "<SPC>")
  (defconst main-color "#50fa7b")

  (setq my-font (if (eq system-type 'gnu/linux)
		    "Source Code Pro-9"
		  "Source Code Pro-14"))

  (setq my-shell (if (eq system-type 'gnu/linux)
		     "/usr/bin/fish"
		   "/usr/local/bin/fish"))
#+END_SRC
* Basic
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)

  (defvar better-gc-cons-threshold 134217728 ; 128mb
	"The default value to use for `gc-cons-threshold'.

  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (if (boundp 'after-focus-change-function)
		  (add-function :after after-focus-change-function
				(lambda ()
				  (unless (frame-focus-state)
				    (garbage-collect))))
		(add-hook 'after-focus-change-function 'garbage-collect))
	      (defun gc-minibuffer-setup-hook ()
		(setq gc-cons-threshold (* better-gc-cons-threshold 2)))

	      (defun gc-minibuffer-exit-hook ()
		(garbage-collect)
		(setq gc-cons-threshold better-gc-cons-threshold))

	      (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
	      (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))


  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)

  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)

  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'super)
    (setq mac-pass-command-to-system nil))


  ;;custom file
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el" user-emacs-directory))

  ;;diable error tone
  (setq ring-bell-function 'ignore)

  ;;no backup file
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;;show recent file
  (recentf-mode 1)
  (setq recentf-max-menu-items 15)

  ;;delete selection
  (delete-selection-mode 1)

  ;;paste from clipboard
  (setq x-select-enable-clipboard t)

  ;;replace Yes/No with y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;;exec-path
  (add-to-list 'exec-path "/usr/local/bin")

  ;;emacs deamon
  (if (and (fboundp 'server-running-p) 
         (not (server-running-p)))
   (server-start))

  ;;tab-width
  (setq tab-width 4)
#+end_src
* Config
** initialize package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa"   . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
  ;; install use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (add-to-list 'load-path
	       (expand-file-name (concat user-emacs-directory "elisp")))
#+end_src
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1)
    (setq evil-insert-state-cursor '(hollow "yellow")
	  evil-normal-state-cursor '(box "green")))

  (use-package evil-collection
    :after (evil)
    :init
    (setq evil-collection-company-use-tng nil)
    :config
    (evil-collection-init))

  (use-package evil-snipe
    :after (evil)
    :config
    (evil-snipe-mode +1))

  (use-package evil-goggles
    :after (evil)
    :ensure t
    :config
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-nerd-commenter
    :after (evil))

  (use-package evil-pinyin
    :after (evil)
    :init
    (setq-default evil-pinyin-scheme 'simplified-xiaohe-all)
    (setq-default evil-pinyin-with-search-rule 'always)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (global-evil-pinyin-mode))

  (use-package evil-exchange
    :after (evil)
    :config
    (evil-exchange-install))
#+END_SRC
** edit
#+BEGIN_SRC emacs-lisp
  (use-package expand-region)

  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))

  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1))

  (use-package ialign)

  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package yasnippet
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets)

  (use-package undo-tree
    :init
    (global-undo-tree-mode))
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (require 'dired-x)
    (setq dired-guess-shell-alist-user '(("\\.*\\'" "open")))
    (setq dired-use-ls-dired nil))

  (setq dired-listing-switches "-alht")
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish (company-mode " Cmp.")
    :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
    :hook (after-init . global-company-mode)
    :config (setq company-dabbrev-code-everywhere t
		  company-dabbrev-code-modes t
		  company-dabbrev-code-other-buffers 'all
		  company-dabbrev-downcase nil
		  company-dabbrev-ignore-case t
		  company-dabbrev-other-buffers 'all
		  company-require-match nil
		  company-minimum-prefix-length 1
		  company-show-numbers t
		  company-tooltip-limit 20
		  company-idle-delay 0
		  company-echo-delay 0
		  company-tooltip-offset-display 'scrollbar
		  company-begin-commands '(self-insert-command))
    (eval-after-load 'company
      '(add-to-list 'company-backends
		    '(company-abbrev company-yasnippet company-capf))))

  (use-package company-prescient
    :init (company-prescient-mode 1))

  (use-package company-box
    :diminish
    :defines company-box-icons-all-the-icons
    :hook (company-mode . company-box-mode)
    :init (setq company-box-backends-colors nil
		company-box-doc-delay 0.1)
    :config
    (with-no-warnings
      ;; Prettify icons
      (defun my-company-box-icons--elisp (candidate)
	(when (or (derived-mode-p 'emacs-lisp-mode) (derived-mode-p 'lisp-mode))
	  (let ((sym (intern candidate)))
	    (cond ((fboundp sym) 'Function)
		  ((featurep sym) 'Module)
		  ((facep sym) 'Color)
		  ((boundp sym) 'Variable)
		  ((symbolp sym) 'Text)
		  (t . nil)))))
      (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

      ;; Display borders and optimize performance
      (defun my-company-box--display (string on-update)
	"Display the completions."
	(company-box--render-buffer string on-update)

	(let ((frame (company-box--get-frame))
	      (border-color (face-foreground 'font-lock-comment-face nil t)))
	  (unless frame
	    (setq frame (company-box--make-frame))
	    (company-box--set-frame frame))
	  (company-box--compute-frame-position frame)
	  (company-box--move-selection t)
	  (company-box--update-frame-position frame)
	  (unless (frame-visible-p frame)
	    (make-frame-visible frame))
	  (company-box--update-scrollbar frame t)
	  (set-face-background 'internal-border border-color frame)
	  (when (facep 'child-frame-border)
	    (set-face-background 'child-frame-border border-color frame)))
	(with-current-buffer (company-box--get-buffer)
	  (company-box--maybe-move-number (or company-box--last-start 1))))
      (advice-add #'company-box--display :override #'my-company-box--display)

      (setq company-box-doc-frame-parameters '((internal-border-width . 1)
					       (left-fringe . 8)
					       (right-fringe . 8)))

      (defun my-company-box-doc--make-buffer (object)
	(let* ((buffer-list-update-hook nil)
	       (inhibit-modification-hooks t)
	       (string (cond ((stringp object) object)
			     ((bufferp object) (with-current-buffer object (buffer-string))))))
	  (when (and string (> (length (string-trim string)) 0))
	    (with-current-buffer (company-box--get-buffer "doc")
	      (erase-buffer)
	      (insert (propertize "\n" 'face '(:height 0.5)))
	      (insert string)
	      (insert (propertize "\n\n" 'face '(:height 0.5)))

	      ;; Handle hr lines of markdown
	      ;; @see `lsp-ui-doc--handle-hr-lines'
	      (with-current-buffer (company-box--get-buffer "doc")
		(let (bolp next before after)
		  (goto-char 1)
		  (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
		    (when (get-text-property next 'markdown-hr)
		      (goto-char next)
		      (setq bolp (bolp)
			    before (char-before))
		      (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
		      (setq after (char-after (1+ (point))))
		      (insert
		       (concat
			(and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
			(propertize "\n" 'face '(:height 0.5))
			(propertize " "
				    'display '(space :height (1))
				    'company-box-doc--replace-hr t
				    'face `(:background ,(face-foreground 'font-lock-comment-face)))
			(propertize " " 'display '(space :height (1)))
			(and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))

	      (setq mode-line-format nil
		    display-line-numbers nil
		    header-line-format nil
		    show-trailing-whitespace nil
		    cursor-in-non-selected-windows nil)
	      (current-buffer)))))
      (advice-add #'company-box-doc--make-buffer :override #'my-company-box-doc--make-buffer)

      ;; Display the border and fix the markdown header properties
      (defun my-company-box-doc--show (selection frame)
	(cl-letf (((symbol-function 'completing-read) #'company-box-completing-read)
		  (window-configuration-change-hook nil)
		  (inhibit-redisplay t)
		  (display-buffer-alist nil)
		  (buffer-list-update-hook nil))
	  (-when-let* ((valid-state (and (eq (selected-frame) frame)
					 company-box--bottom
					 company-selection
					 (company-box--get-frame)
					 (frame-visible-p (company-box--get-frame))))
		       (candidate (nth selection company-candidates))
		       (doc (or (company-call-backend 'quickhelp-string candidate)
				(company-box-doc--fetch-doc-buffer candidate)))
		       (doc (company-box-doc--make-buffer doc)))
	    (let ((frame (frame-local-getq company-box-doc-frame))
		  (border-color (face-foreground 'font-lock-comment-face nil t)))
	      (unless (frame-live-p frame)
		(setq frame (company-box-doc--make-frame doc))
		(frame-local-setq company-box-doc-frame frame))
	      (set-face-background 'internal-border border-color frame)
	      (when (facep 'child-frame-border)
		(set-face-background 'child-frame-border border-color frame))
	      (company-box-doc--set-frame-position frame)

	      ;; Fix hr props. @see `lsp-ui-doc--fix-hr-props'
	      (with-current-buffer (company-box--get-buffer "doc")
		(let (next)
		  (while (setq next (next-single-property-change (or next 1) 'company-box-doc--replace-hr))
		    (when (get-text-property next 'company-box-doc--replace-hr)
		      (put-text-property next (1+ next) 'display
					 '(space :align-to (- right-fringe 1) :height (1)))
		      (put-text-property (1+ next) (+ next 2) 'display
					 '(space :align-to right-fringe :height (1)))))))

	      (unless (frame-visible-p frame)
		(make-frame-visible frame))))))
      (advice-add #'company-box-doc--show :override #'my-company-box-doc--show)

      (defun my-company-box-doc--set-frame-position (frame)
	(-let* ((frame-resize-pixelwise t)

		(box-frame (company-box--get-frame))
		(box-position (frame-position box-frame))
		(box-width (frame-pixel-width box-frame))
		(box-height (frame-pixel-height box-frame))
		(box-border-width (frame-border-width box-frame))

		(window (frame-root-window frame))
		((text-width . text-height) (window-text-pixel-size window nil nil
								    (/ (frame-pixel-width) 2)
								    (/ (frame-pixel-height) 2)))
		(border-width (or (alist-get 'internal-border-width company-box-doc-frame-parameters) 0))

		(x (- (+ (car box-position) box-width) border-width))
		(space-right (- (frame-pixel-width) x))
		(space-left (car box-position))
		(fringe-left (or (alist-get 'left-fringe company-box-doc-frame-parameters) 0))
		(fringe-right (or (alist-get 'right-fringe company-box-doc-frame-parameters) 0))
		(width (+ text-width border-width fringe-left fringe-right))
		(x (if (> width space-right)
		       (if (> space-left width)
			   (- space-left width)
			 space-left)
		     x))
		(y (cdr box-position))
		(bottom (+ company-box--bottom (frame-border-width)))
		(height (+ text-height (* 2 border-width)))
		(y (cond ((= x space-left)
			  (if (> (+ y box-height height) bottom)
			      (+ (- y height) border-width)
			    (- (+ y box-height) border-width)))
			 ((> (+ y height) bottom)
			  (- (+ y box-height) height))
			 (t y))))
	  (set-frame-position frame (max x 0) (max y 0))
	  (set-frame-size frame text-width text-height t)))
      (advice-add #'company-box-doc--set-frame-position :override #'my-company-box-doc--set-frame-position)

      (setq company-box-icons-all-the-icons
	    `((Unknown . ,(all-the-icons-material "find_in_page" :height 1.0 :v-adjust -0.2))
	      (Text . ,(all-the-icons-faicon "text-width" :height 1.0 :v-adjust -0.02))
	      (Method . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
	      (Function . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
	      (Constructor . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
	      (Field . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
	      (Variable . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
	      (Class . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
	      (Interface . ,(all-the-icons-material "share" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
	      (Module . ,(all-the-icons-material "view_module" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
	      (Property . ,(all-the-icons-faicon "wrench" :height 1.0 :v-adjust -0.02))
	      (Unit . ,(all-the-icons-material "settings_system_daydream" :height 1.0 :v-adjust -0.2))
	      (Value . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
	      (Enum . ,(all-the-icons-material "storage" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
	      (Keyword . ,(all-the-icons-material "filter_center_focus" :height 1.0 :v-adjust -0.2))
	      (Snippet . ,(all-the-icons-material "format_align_center" :height 1.0 :v-adjust -0.2))
	      (Color . ,(all-the-icons-material "palette" :height 1.0 :v-adjust -0.2))
	      (File . ,(all-the-icons-faicon "file-o" :height 1.0 :v-adjust -0.02))
	      (Reference . ,(all-the-icons-material "collections_bookmark" :height 1.0 :v-adjust -0.2))
	      (Folder . ,(all-the-icons-faicon "folder-open" :height 1.0 :v-adjust -0.02))
	      (EnumMember . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2))
	      (Constant . ,(all-the-icons-faicon "square-o" :height 1.0 :v-adjust -0.1))
	      (Struct . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
	      (Event . ,(all-the-icons-octicon "zap" :height 1.0 :v-adjust 0 :face 'all-the-icons-orange))
	      (Operator . ,(all-the-icons-material "control_point" :height 1.0 :v-adjust -0.2))
	      (TypeParameter . ,(all-the-icons-faicon "arrows" :height 1.0 :v-adjust -0.02))
	      (Template . ,(all-the-icons-material "format_align_left" :height 1.0 :v-adjust -0.2)))
	    company-box-icons-alist 'company-box-icons-all-the-icons)))

  (use-package company-quickhelp-terminal
    :defines company-quickhelp-delay
    :bind (:map company-active-map
		([remap company-show-doc-buffer] . company-quickhelp-manual-begin))
    :hook ((global-company-mode . company-quickhelp-mode)
	   (company-quickhelp-mode  . company-quickhelp-terminal-mode))
    :init (setq company-quickhelp-delay 0.3))

  (use-package company-english-helper
    :load-path "~/.emacs.d/elisp/company-english-helper")

  ;; (use-package company-tabnine
  ;;   :config
  ;;   (add-to-list 'company-backends #'company-tabnine))
#+END_SRC
** vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package emacs
    :init
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (setq enable-recursive-minibuffers t))

  (use-package consult
    :config
    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-.")))
#+END_SRC
** version-control
#+BEGIN_SRC emacs-lisp
  (use-package magit)

  (use-package git-messenger
    :init (setq git-messenger:show-detail t
		git-messenger:use-magit-popup t))

  (use-package git-timemachine)

  ;; highlight diffs
  (use-package diff-hl
    :after (hydra)
    :config
    (global-diff-hl-mode)
    (defhydra hydra-diff-hl ()
      "git diff"
      ("j" diff-hl-next-hunk)
      ("k" diff-hl-previous-hunk)
      ("x" diff-hl-revert-hunk)
      ("q" nil "cancel")))
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :diminish
    :defines lsp-clients-python-library-directories
    :commands (lsp-enable-which-key-integration
	       lsp-format-buffer
	       lsp-organize-imports
	       lsp-install-server)
    :custom-face
    (lsp-headerline-breadcrumb-path-error-face
     ((t :underline (:style wave :color ,(face-foreground 'error))
	 :inherit lsp-headerline-breadcrumb-path-face)))
    (lsp-headerline-breadcrumb-path-warning-face
     ((t :underline (:style wave :color ,(face-foreground 'warning))
	 :inherit lsp-headerline-breadcrumb-path-face)))
    (lsp-headerline-breadcrumb-path-info-face
     ((t :underline (:style wave :color ,(face-foreground 'success))
	 :inherit lsp-headerline-breadcrumb-path-face)))
    (lsp-headerline-breadcrumb-path-hint-face
     ((t :underline (:style wave :color ,(face-foreground 'success))
	 :inherit lsp-headerline-breadcrumb-path-face)))

    (lsp-headerline-breadcrumb-symbols-error-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'error)))))
    (lsp-headerline-breadcrumb-symbols-warning-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'warning)))))
    (lsp-headerline-breadcrumb-symbols-info-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'success)))))
    (lsp-headerline-breadcrumb-symbols-hint-face
     ((t :inherit lsp-headerline-breadcrumb-symbols-face
	 :underline (:style wave :color ,(face-foreground 'success)))))
    :hook ((prog-mode . (lambda ()
			  (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode)
			    (lsp-deferred))))
	   (lsp-mode . (lambda ()
			 ;; Integrate `which-key'
			 (lsp-enable-which-key-integration)
			 )))
    :bind (:map lsp-mode-map
		("C-c C-d" . lsp-describe-thing-at-point)
		([remap xref-find-definitions] . lsp-find-definition)
		([remap xref-find-references] . lsp-find-references))
    :init
    ;; @see https://emacs-lsp.github.io/lsp-mode/page/performance
    (setq read-process-output-max (* 1024 1024)) ;; 1MB

    (setq lsp-keymap-prefix "C-c l"
	  lsp-keep-workspace-alive nil
	  lsp-signature-auto-activate nil
	  lsp-modeline-code-actions-enable nil
	  lsp-modeline-diagnostics-enable nil
	  lsp-modeline-workspace-status-enable nil

	  lsp-enable-file-watchers nil
	  lsp-enable-folding nil
	  lsp-enable-symbol-highlighting nil
	  lsp-enable-text-document-color nil

	  lsp-enable-indentation nil
	  lsp-enable-on-type-formatting nil)

    ;; For `lsp-clients'
    (setq lsp-clients-python-library-directories '("/usr/local/" "/usr/"))
    :config
    (with-no-warnings
      ;; Disable `lsp-mode' in `git-timemachine-mode'
      (defun my-lsp--init-if-visible (fn &rest args)
	(unless (bound-and-true-p git-timemachine-mode)
	  (apply fn args)))
      (advice-add #'lsp--init-if-visible :around #'my-lsp--init-if-visible)

      ;; Enable `lsp-mode' in sh/bash/zsh
      (defun my-lsp-bash-check-sh-shell (&rest _)
	(and (eq major-mode 'sh-mode)
	     (memq sh-shell '(sh bash zsh))))
      (advice-add #'lsp-bash-check-sh-shell :override #'my-lsp-bash-check-sh-shell)

      ;; Only display icons in GUI
      (defun my-lsp-icons-get-symbol-kind (fn &rest args)
	(when (display-graphic-p)
	  (apply fn args)))
      (advice-add #'lsp-icons-get-by-symbol-kind :around #'my-lsp-icons-get-symbol-kind)

      (defun my-lsp-icons-get-by-file-ext (fn &rest args)
	(when (display-graphic-p)
	  (apply fn args)))
      (advice-add #'lsp-icons-get-by-file-ext :around #'my-lsp-icons-get-by-file-ext)

      (defun my-lsp-icons-all-the-icons-material-icon (icon-name face fallback &optional feature)
	(if (and (display-graphic-p)
		 (functionp 'all-the-icons-material)
		 (lsp-icons--enabled-for-feature feature))
	    (all-the-icons-material icon-name
				    :face face)
	  (propertize fallback 'face face)))
      (advice-add #'lsp-icons-all-the-icons-material-icon
		  :override #'my-lsp-icons-all-the-icons-material-icon))

    (defun lsp-update-server ()
      "Update LSP server."
      (interactive)
      ;; Equals to `C-u M-x lsp-install-server'
      (lsp-install-server t)))

  (use-package lsp-ui
    :custom-face
    (lsp-ui-sideline-code-action ((t (:inherit warning))))
    :bind (("C-c u" . lsp-ui-imenu)
	   :map lsp-ui-mode-map
	   ("M-<f6>" . lsp-ui-hydra/body)
	   ("M-RET" . lsp-ui-sideline-apply-code-actions)
	   ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
	   ([remap xref-find-references] . lsp-ui-peek-find-references))
    :hook (lsp-mode . lsp-ui-mode)
    :init (setq lsp-ui-sideline-show-diagnostics nil
		lsp-ui-sideline-ignore-duplicate t
		lsp-ui-doc-delay 0.1
		lsp-ui-doc-position 'at-point
		lsp-ui-doc-border (face-foreground 'font-lock-comment-face nil t)
		lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
				      ,(face-foreground 'font-lock-string-face)
				      ,(face-foreground 'font-lock-constant-face)
				      ,(face-foreground 'font-lock-variable-name-face)))
    :config
    (with-no-warnings
      (defun my-lsp-ui-doc--handle-hr-lines nil
	(let (bolp next before after)
	  (goto-char 1)
	  (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
	    (when (get-text-property next 'markdown-hr)
	      (goto-char next)
	      (setq bolp (bolp)
		    before (char-before))
	      (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
	      (setq after (char-after (1+ (point))))
	      (insert
	       (concat
		(and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
		(propertize "\n" 'face '(:height 0.5))
		(propertize " "
			    ;; :align-to is added with lsp-ui-doc--fix-hr-props
			    'display '(space :height (1))
			    'lsp-ui-doc--replace-hr t
			    'face `(:background ,(face-foreground 'font-lock-comment-face)))
		;; :align-to is added here too
		(propertize " " 'display '(space :height (1)))
		(and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))
      (advice-add #'lsp-ui-doc--handle-hr-lines :override #'my-lsp-ui-doc--handle-hr-lines))

    ;; `C-g'to close doc
    (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

    ;; Reset `lsp-ui-doc-background' after loading theme
    (add-hook 'after-load-theme-hook
	      (lambda ()
		(setq lsp-ui-doc-border (face-foreground 'font-lock-comment-face nil t))
		(set-face-background 'lsp-ui-doc-background (face-background 'tooltip nil t)))))
#+END_SRC
** terminal
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'term-mode-hook (lambda ()
  ;; 			    (setq-local global-hl-line-mode nil)
  ;; 			    (setq-local mode-line-format nil)))

  (defun my-new-term ()
    (interactive)
    (ansi-term my-shell))

  (use-package vterm
    :commands vterm--internal
    :init
    (setq vterm-always-compile-module t)

    (with-no-warnings
      (defvar vterm-posframe--frame nil)

      (defun vterm-posframe-hidehandler (_)
	"Hidehandler used by `vterm-posframe-toggle'."
	(not (eq (selected-frame) posframe--frame)))

      (defun vterm-posframe-toggle ()
	"Toggle `vterm' child frame."
	(interactive)
	(let ((buffer (vterm--internal #'ignore 100)))
	  (if (and vterm-posframe--frame
		   (frame-live-p vterm-posframe--frame)
		   (frame-visible-p vterm-posframe--frame))
	      (progn
		(posframe-hide buffer)
		;; Focus the parent frame
		(select-frame-set-input-focus (frame-parent vterm-posframe--frame)))
	    (let ((width  (max 80 (/ (frame-width) 2)))
		  (height (/ (frame-height) 2))
		  (cwd default-directory))
	      (setq vterm-posframe--frame
		    (posframe-show
		     buffer
		     :poshandler #'posframe-poshandler-frame-center
		     :hidehandler #'vterm-posframe-hidehandler
		     :left-fringe 8
		     :right-fringe 8
		     :width width
		     :height height
		     :min-width width
		     :min-height height
		     :internal-border-width 1
		     :internal-border-color "#50fa7b"
		     :override-parameters '((cursor-type . t))
		     :accept-focus t))
	      (with-current-buffer buffer
		(save-excursion
		  (vterm-send-C-c)
		  (vterm-clear t)
		  (vterm-insert (concat "cd "
					(shell-quote-argument (expand-file-name cwd))))
		  (vterm-send-return)
		  (evil-insert-state))
		(setq-local cursor-type 'box))
	      ;; Focus the child frame
	      (select-frame-set-input-focus vterm-posframe--frame)))))))


  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))


  (use-package shell-pop
    :init
    (custom-set-variables
     '(shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
     '(shell-pop-window-size 30)
     '(shell-pop-full-span t)
     '(shell-pop-window-position "bottom")
     '(shell-pop-autocd-to-working-dir t)
     '(shell-pop-restore-window-configuration t)
     '(shell-pop-cleanup-buffer-at-process-exit t)))
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :disabled t
    :init
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner "~/.emacs.d/banners/dark_knight.png")
    (setq dashboard-image-banner-max-height 400)
    (setq dashboard-items '((recents . 10)
			    (projects . 7)
			    (bookmarks . 7))))
#+END_SRC
** music
#+BEGIN_SRC emacs-lisp
  (use-package bongo
    :after (hydra)
    ;; :if (eq system-type 'gnu/linux)
    :config
    (setq bongo-logo nil)
    (setq bongo-display-track-icons nil)
    (setq bongo-display-track-lengths nil)
    (setq bongo-display-header-icons nil)
    (setq bongo-display-playback-mode-indicator t)
    (setq bongo-header-line-mode nil)
    (setq bongo-mode-line-indicator-mode nil)
    (setq bongo-field-separator (propertize " · " 'face 'shadow))

    (setq bongo-prefer-library-buffers nil)
    (setq bongo-insert-whole-directory-trees t)
    ;;(setq bongo-join-inserted-tracks nil)
    (setq bongo-enabled-backends '(vlc))

    (defun init-goto-bongo ()
      (interactive)
      (let ((bongo-playlist-buffer-name "*Bongo Playlist*"))
	(unless (get-buffer bongo-playlist-buffer-name)
	  (bongo)
	  (bongo-insert-directory-tree "~/Music/my_music")
	  (goto-char (point-min))
	  (bongo-random-playback-mode))
	(switch-to-buffer bongo-playlist-buffer-name)))

    (defhydra hydra-bongo ()
      ("m" init-goto-bongo "goto-bongo" :color blue)
      ("<SPC>" bongo-pause/resume "play/pause")
      ("r" bongo-play-random "play random")
      ("n" bongo-play-next "play next")
      ("p" bongo-play-previous "play previous")
      ("f" bongo-seek-forward-10 "forward")
      ("F" bongo-seek-forward-60 "Forward")
      ("b" bongo-seek-backward-10 "backward")
      ("B" bongo-seek-backward-60 "Backward")
      ("q" nil "Cancel")))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :config
    (setq python-shell-interpreter "python3"))

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

  ;; python language server
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp)))
    :init
    (when (executable-find "python3")
      (setq lsp-pyright-python-executable-cmd "python3")))

  (use-package flymake-python-pyflakes)
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "✎")
					   ("#+END_SRC" . "□")
					   ("#+begin_src" . "✎")
					   ("#+end_src" . "□")))
    (add-hook 'org-mode-hook 'prettify-symbols-mode)

    (setq org-startup-with-inline-images t)
    (setq org-babel-python-command "python3")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (R . t)
       (sql . t))))
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-preview-eww)

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** 中文
#+BEGIN_SRC emacs-lisp
  (use-package ace-pinyin
    :config
    (ace-pinyin-global-mode +1))

  (use-package pyim
    :init
    (pyim-default-scheme 'xiaohe-shuangpin)
    :config
    ;; 让 vertico 通过 orderless 支持拼音搜索候选项功能
    (defun my-orderless-regexp (orig_func component)
      (let ((result (funcall orig_func component)))
	(pyim-cregexp-build result)))
    (advice-add 'orderless-regexp :around #'my-orderless-regexp))

  (use-package youdao-dictionary)
  (use-package fanyi)

  ;; 中文输入法
  (use-package rime
    :config
    (unless (eq system-type 'gnu/linux)
      (setq rime-librime-root "~/.emacs.d/librime/dist"))
    (setq rime-posframe-properties
	  (list :background-color "#282a36"
		:foreground-color "#bd93f9"
		:font my-font
		:internal-border-width 10))

    (setq default-input-method "rime"
	  rime-show-candidate 'minibuffer))
#+END_SRC
** other
#+BEGIN_SRC emacs-lisp
  ;; jump between windows
  (use-package ace-window
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inhrit ace-jump-face-foreground :height 3.0)))))))

  (use-package benchmark-init
    :init (benchmark-init/activate)
    :hook (after-init . benchmark-init/deactivate))

  (use-package discover-my-major
    :bind ("C-h C-m" . discover-my-major))

  (use-package google-this)

  (use-package restart-emacs)

  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode))

  (use-package company-restclient
    :config
    (add-to-list 'company-backends 'company-restclient))

  (use-package posframe)

  ;; try a package temporarily
  (use-package try)

  (use-package bufler)
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp
  ;; theme
  (use-package dracula-theme
    :init
    (load-theme 'dracula t)
    (set-cursor-color main-color))

  ;; modeline
  (use-package doom-modeline
    :after (all-the-icons)
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-major-mode-icon nil)
    (setq doom-modeline-height 1)
    (set-face-attribute 'mode-line nil :family "Source Code Pro" :height 150)
    (set-face-attribute 'mode-line-inactive nil :family "Source Code Pro" :height 150))

  ;; icons
  (use-package all-the-icons)

  (use-package beacon
    :config
    (beacon-mode 1)
    (setq beacon-color main-color))

  ;; set transparency
  ;; (set-frame-parameter (selected-frame) 'alpha '(90 90))
  ;; (add-to-list 'default-frame-alist '(alpha 90 90))

  ;; display time
  (display-time-mode 1)
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)

  ;; display battery
  (display-battery-mode 1)

  ;;font
  (add-to-list 'default-frame-alist `(font . ,my-font))
  (when (eq system-type 'darwin)
	(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))

  ;;hide tool bar
  (tool-bar-mode -1)

  ;;hide scroll bar
  (scroll-bar-mode -1)

  (menu-bar-mode -1)

  ;;show line number
  (global-linum-mode t)

  ;;disable welcome page
  (setq inhibit-splash-screen t)

  ;;default open with full screen
  (setq initial-frame-alist (quote ((fullscreen . maximized))))

  ;;set cursor type
  (setq-default cursor-type 'box)
  (set-cursor-color "#00ff00")
  (blink-cursor-mode 0)

  ;;show match ()
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

  ;;highlight current line
  (when (display-graphic-p)
	(global-hl-line-mode))

  (setq visible-bell nil)

  ;;Display lambda as λ
  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-alist '(("lambda" . 955)))
#+END_SRC
* Keybindings
** general
#+BEGIN_SRC emacs-lisp
  (use-package general)
  (use-package hydra :ensure hydra)

  (use-package which-key
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))

  (general-create-definer my-leader-def
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix my-leader-key
    :non-normal-prefix "C-,")

  ;; copy to clipboard on MacOS
  (when (eq system-type 'darwin)
    (general-define-key
     :states '(visual)
     "C-c r" '(lambda () (interactive)
		(shell-command-on-region (point) (mark) "pbcopy"))))

  (general-define-key
   :states '(normal visual)
   "`" 'shell-pop
   ";" 'switch-to-buffer
   "," 'evil-switch-to-windows-last-buffer
   "." 'evil-avy-goto-char-timer
   "f" 'evil-snipe-f
   "F" 'evil-snipe-F
   "t" 'evil-snipe-t
   "T" 'evil-snipe-T
   "gl" 'evil-avy-goto-line
   "g." 'evil-repeat)

  (general-define-key
   "C-;" 'vterm-posframe-toggle
   "<f5>" 'revert-buffer
   "C-s" 'consult-line
   "M-y" 'yank-pop
   "M-RET" 'lsp-execute-code-action

   "M-/" 'company-files)
#+END_SRC
** leader-keys
*** a-key
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "<SPC>" 'execute-extended-command
    "q" '((lambda ()
	    (interactive)
	    (progn
	      (kill-current-buffer)
	      (when (> (length (window-list)) 1)
		(delete-window))))
	  :wk "kill-buffer")
    "'" 'shell-pop)
#+END_SRC
*** buffer
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "b" '(:wk "buffer")

    "b+" 'er/expand-region
    "bb" 'bufler
    "bs" 'switch-buffer-other-window
    "bS" '((lambda ()
	     "create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
	     (interactive)
	     (let ((n 0)
		   bufname)
	       (while (progn
			(setq bufname (concat "*scratch"
					      (if (= n 0) "" (int-to-string n))
					      "*"))
			(setq n (1+ n))
			(get-buffer bufname)))
	       (switch-to-buffer (get-buffer-create bufname))
	       (if (= n 1) (lisp-interaction-mode))))
	   :wk "new scratch"))
#+END_SRC
*** commenter
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "c" '(:wk "commenter")

    "cc" 'evilnc-comment-or-uncomment-lines
    "cp" 'evilnc-copy-and-comment-lines
    "cb" 'evilnc-comment-or-uncomment-paragraphs)
#+END_SRC
*** file
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "f" '(:wk "file")

    "fe" '((lambda () (interactive) (find-file "~/.emacs.d/myinit.org"))
	   :wk "open config")
    "fE" '((lambda () (interactive) (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org")))
	   :wk "reload config")
    "ff" 'find-file
    "fF" '((lambda ()
	     (interactive)
	     (shell-command "open -R ."))
	   :wk "open in Finder")
    "fr" 'consult-recent-file
    "fR" 'revert-buffer
    "fd" 'dired
    "fs" 'save-buffer
    "fS" 'save-some-buffers
    "fo" 'find-file-at-point
    "fp" '(lambda () (interactive) (when (file-exists-p (current-kill 0))
				(find-file (current-kill 0)))))
#+END_SRC
*** git
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "g" '(:wk "git")

    "gg" 'magit-status
    "gd" 'hydra-diff-hl/body
    "gx" 'diff-hl-revert-hunk
    "gm" 'git-messenger:popup-message)
#+END_SRC
*** jump
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "j" '(:wk "jump")

    "jj" 'avy-goto-char-2
    "jJ" 'avy-goto-char
    "jt" 'avy-goto-char-timer
    "jw" 'avy-goto-word-1
    "jl" 'avy-goto-line)
#+END_SRC
*** music
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    ;; music
    "m" '(:wk "music")
    "mM" '(hydra-bongo/body :wk "music")
    "mm" '(init-goto-bongo :wk "goto music")
    "m <SPC>" 'bongo-pause/resume
    "mr" 'bongo-play-random
    "mn" 'bongo-play-next
    "mp" 'bongo-play-previous
    "mf" 'bongo-seek-forward-10
    "mF" 'bongo-seek-forward-60
    "mb" 'bongo-seek-backward-10
    "mB" 'bongo-seek-backward-60)
#+END_SRC
*** project
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "p" '(:wk "project")

    "pp" 'projectile-command-map
    "pt" '(projectile-run-vterm
	   :wk "project term"))
#+END_SRC
*** quit
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "<ESC>" '(:wk "quit")
    "<ESC> <ESC>" 'save-buffers-kill-terminal
    "<ESC> 1" 'restart-emacs)
#+END_SRC
*** search
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "s" '(:wk "search")

    "ss" 'consult-line-multi
    "si" 'consult-imenu
    "sr" 'consult-ripgrep
    "sf" 'find-file-in-project
    "sL" 'consult-locate
    "sg" 'google-this
    "sd" '(lambda () (interactive)
	    (if (display-graphic-p)
		(youdao-dictionary-search-at-point-posframe)
	      (youdao-dictionary-search-at-point+)))
    "sD" '(lambda () (interactive)
	    (fanyi-dwim2))
    "sl" 'browse-url)
#+END_SRC
*** terminal
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    ;; terminal
    "t" '(:wk "terminal")
    "tt" '((lambda ()
	     (interactive) (my-new-term))
	   :wk "new terminal"))
#+END_SRC
*** toggle
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "T" '(:wk "toggle")

    "Te" 'toggle-company-english-helper

    "Tt" '((lambda ()
	     (interactive)
	     (let ((alpha (frame-parameter nil 'alpha)))
	       (set-frame-parameter
		nil 'alpha
		(if (eql (cond ((numberp alpha) alpha)
			       ((numberp (cdr alpha)) (cdr alpha))
			       ;; Also handle undocumented (<active> <inactive>) form.
			       ((numberp (cadr alpha)) (cadr alpha)))
			 100)
		    '(85 . 50) '(100 . 100)))))
	   :wk "toggle-transparency"))
#+END_SRC
*** window
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window ()
    "window"
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("H" windmove-swap-states-left)
    ("J" windmove-swap-states-down)
    ("K" windmove-swap-states-up)
    ("L" windmove-swap-states-right)
    ("C-h" evil-window-move-far-left)
    ("C-j" evil-window-move-very-bottom)
    ("C-k" evil-window-move-very-top)
    ("C-l" evil-window-move-far-right)
    ("/" (lambda ()
	   (interactive)
	   (split-window-right)
	   (windmove-right))
     "v-split")
    ("?" (lambda ()
	   (interactive)
	   (split-window-below)
	   (windmove-down))
     "h-split")
    ("0" balance-windows "balance-windows")
    ("=" enlarge-window "enlarge-v")
    ("-" shrink-window "shrink-v")
    ("<" shrink-window-horizontally "shrink-h")
    (">" enlarge-window-horizontally "enlarge-h")
    ("g" ace-window "goto")
    ("s" ace-swap-window "swap")
    ("x" delete-window "x")
    ("d" ace-delete-window "del")
    ("m" delete-other-windows "maximize" :color blue)
    ("q" nil "cancel"))

  (my-leader-def
    "w" '(:wk "window")

    "ww" 'hydra-window/body
    "wh" 'windmove-left
    "wj" 'windmove-down
    "wk" 'windmove-up
    "wl" 'windmove-right
    "wH" 'windmove-swap-states-left
    "wJ" 'windmove-swap-states-down
    "wK" 'windmove-swap-states-up
    "wL" 'windmove-swap-states-right
    "wg" 'ace-window
    "ws" 'ace-swap-window
    "w/" 'split-window-right
    "w?" 'split-window-below
    "wm" 'delete-other-windows
    "wd" 'delete-window)
#+END_SRC

** major-mode-keys
*** bufler-list-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'bufler-list-mode-map
   "r" 'bufler-list
   "q" '(lambda ()
	  (interactive)
	  (progn
	    (kill-current-buffer)
	    (when (> (length (window-list)) 1)
	      (delete-window))))
   "d" '(lambda ()
	  (interactive)
	  (when
	      (yes-or-no-p "kill buffer?")
	    (bufler-list-buffer-kill)))
   "s" 'bufler-list-buffer-save
   "RET" 'bufler-list-buffer-switch)
#+END_SRC
*** bongo-playlist-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'bongo-playlist-mode-map
   "RET" 'bongo-play
   "TAB" 'bongo-toggle-collapsed
   "J" 'bongo-next-header-line
   "K" 'bongo-previous-header-line
   "r" 'bongo-play-random
   "c" 'bongo-recenter
   "p" 'bongo-pause/resume
   "f" 'bongo-seek-forward-10
   "F" 'bongo-seek-forward-60
   "b" 'bongo-seek-backward-10
   "B" 'bongo-seek-backward-60
   "q" 'bongo-quit
   "Q" 'bongo-stop)
#+END_SRC
*** markdown-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix my-leader-key
   :keymaps 'markdown-mode-map
   "l" '(:wk "md")
   "lp" 'markdown-live-preview-mode
   "lr" '((lambda ()
	    (interactive)
	    (shell-command
	     (format "open %s"
		     (shell-quote-argument (buffer-file-name)))))
	  :wk "open"))
#+END_SRC
*** python-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix my-leader-key
   :keymaps 'python-mode-map
   "l" '(:wk "python")
   "lf" 'lsp-format-buffer
   "lr" '(lsp-rename :wk "rename")
   "ld" 'lsp-find-definition)
#+END_SRC
*** org-mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix my-leader-key
   :keymaps 'org-mode-map
   "l" '(:wk "org")
   "lp" '(grip-mode :wk "preview")
   "ll" 'org-babel-remove-result
   "lr" 'org-ctrl-c-ctrl-c
   "lt" 'org-insert-structure-template)
#+END_SRC
*** term-mode
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'term-mode-map
   "q" '(term-interrupt-subjob
		 :wd "quit"))
#+end_src
